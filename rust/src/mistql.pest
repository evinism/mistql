query = _{ SOI ~ expr ~ EOI }

expr = _{ piped_expr | simple_expr }
piped_expr = { simple_expr ~ ( "|" ~ simple_expr )+ }
simple_expr = _{ function | prefixed_value | indexed_value | infix_expr | simple_value }

simple_value = _{ literal | reference | ( "(" ~ expr ~ ")" ) }
function = { fn_ident ~ fn_args }
fn_args = { fn_arg+ }
fn_arg = _{ infix_expr | prefixed_value | indexed_value | simple_value }
overwrite = { dollar ~ "." ~ ident }
fn_ident = {
    ident |
    overwrite |
    ( "(" ~ simple_expr ~ ")" )
}

indexed_value = ${ simple_value ~ "[" ~ (
    range | low_range | high_range | number
) ~ "]" }
range = { number ~ ":" ~ number }
low_range = { number ~ ":" }
high_range = { ":" ~ number }

prefixed_value = { prefix_op ~ expr }
prefix_op = _{ not_op }

not_op = { "!" }

infix_expr = { (indexed_value | prefixed_value | simple_value ) ~ 
               ( infix_op ~ (indexed_value | prefixed_value | simple_value ) )+ }
infix_op = _{
    plus_op | minus_op | mult_op | div_op | mod_op |
    eq_op | ne_op | gte_op | gt_op | lte_op | lt_op |
    and_op | or_op | match_op
}

plus_op = { "+" }
minus_op = { "-" }
mult_op = { "*" }
div_op = { "/" }
mod_op = { "%" }

eq_op = { "==" }
ne_op = { "!=" }
gte_op = { ">=" }
gt_op = { ">" }
lte_op = { "<=" }
lt_op = { "<" }

and_op = { "&&" }
or_op = { "||" }
match_op = { "=~" }

reference = _{ compound_reference | at | dollar | ident }
compound_reference = {
    ( at | dollar | ident | ( "(" ~ expr ~ ")" ) ) ~
    ("." ~ reference)+ }
literal = _{ object | array | string | number | bool | null }

object = !{
    "{" ~ "}" |
    "{" ~ keyval ~ ("," ~ keyval)* ~ "}"
}
keyval = { key ~ ":" ~ expr }
key = _{ string | ident }

array = !{
    "[" ~ "]" |
    "[" ~ expr ~ ("," ~ expr)* ~ "]"
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

bool = { "true" | "false" }
null = { "null" }

at = { "@" }
dollar = { "$" }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }