query = _{ SOI ~ (piped_expr | simple_expr) ~ EOI }

piped_expr = { simple_expr ~ ( "|" ~ simple_expr )+ }

simple_expr = _{ function | value }

value = _{ simple_value ~ ( infix_op ~ simple_value )* }
simple_value = _{ literal | reference | ( "(" ~ piped_expr ~ ")" ) }
function = { fn_ident ~ value+ }
fn_ident = _{
    ident |
    ( "(" ~ simple_expr ~ ")" )
}

infix_op = {
    "+" | "-" | "*" | "/" | "%" |
    "==" | "!=" | ">=" | ">" | "<=" | "<" |
    "&&" | "||" | "=~"
}

reference = _{ ident | at }
literal = _{ object | array | string | number | bool | null }

object = {
    "{" ~ "}" |
    "{" ~ keyval ~ ("," ~ keyval)* ~ "}"
}
keyval = { key ~ ":" ~ simple_expr }
key = _{ string | ident }

array = {
    "[" ~ "]" |
    "[" ~ simple_expr ~ ("," ~ simple_expr)* ~ "]"
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

bool = { "true" | "false" }
null = { "null" }

at = { "@" | "$.@"}

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }