{
  "data": [
    {
      "describe": "IO roundtrip",
      "cases": [
        {
          "it": "inputs/outputs arrays",
          "assertions": [
            {
              "query": "@",
              "data": [1, 2, 3],
              "expected": [1, 2, 3]
            }
          ]
        },
        {
          "it": "inputs/outputs objects",
          "assertions": [
            {
              "query": "@",
              "data": {
                "a": 1,
                "b": 2,
                "c": 3
              },
              "expected": {
                "a": 1,
                "b": 2,
                "c": 3
              }
            }
          ]
        },
        {
          "it": "inputs/outputs numbers",
          "assertions": [
            {
              "query": "@",
              "data": 100000,
              "expected": 100000
            },
            {
              "query": "@",
              "data": -100000,
              "expected": -100000
            },
            {
              "query": "@",
              "data": 0,
              "expected": 0
            },
            {
              "query": "@",
              "data": 30.5,
              "expected": 30.5
            }
          ]
        },
        {
          "it": "inputs/outputs strings",
          "assertions": [
            {
              "query": "@",
              "data": "hello",
              "expected": "hello"
            },
            {
              "query": "@",
              "data": "",
              "expected": ""
            }
          ]
        },
        {
          "it": "inputs/outputs booleans",
          "assertions": [
            {
              "query": "@",
              "data": true,
              "expected": true
            },
            {
              "query": "@",
              "data": false,
              "expected": false
            }
          ]
        },
        {
          "it": "inputs/outputs null",
          "assertions": [
            {
              "query": "@",
              "data": null,
              "expected": null
            }
          ]
        }
      ]
    },
    {
      "describe": "#map",
      "cases": [
        {
          "it": "correctly maps simple values",
          "assertions": [
            {
              "query": "map @ + 1 [1, 2, 3]",
              "data": {},
              "expected": [2, 3, 4]
            }
          ]
        },
        {
          "it": "correctly maps objecty values",
          "assertions": [
            {
              "query": "map (feature + 1) arr",
              "data": {
                "arr": [{ "feature": 1 }, { "feature": 2 }, { "feature": 3 }]
              },
              "expected": [2, 3, 4]
            }
          ]
        }
      ]
    },
    {
      "describe": "#filter",
      "cases": [
        {
          "it": "correctly filters simple values",
          "assertions": [
            {
              "query": "filter @ > 1 [1, 2, 3]",
              "data": {},
              "expected": [2, 3]
            }
          ]
        },
        {
          "it": "correctly filters objecty values",
          "assertions": [
            {
              "query": "filter (feature > 1) arr",
              "data": {
                "arr": [{ "feature": 1 }, { "feature": 2 }, { "feature": 3 }]
              },
              "expected": [{ "feature": 2 }, { "feature": 3 }]
            }
          ]
        },
        {
          "it": "correctly filters events",
          "assertions": [
            {
              "query": "events | filter type == \"hi\"",
              "data": {
                "events": [
                  { "type": "hi" },
                  { "type": "hello" },
                  { "type": "hi" }
                ]
              },
              "expected": [{ "type": "hi" }, { "type": "hi" }]
            }
          ]
        }
      ]
    },
    {
      "describe": "#reduce",
      "cases": [
        {
          "it": "can sum",
          "assertions": [
            {
              "query": "reduce @[0] + @[1] 0 @",
              "data": [1, 4, 5, 7, 8],
              "expected": 25
            }
          ]
        }
      ]
    },
    {
      "describe": "#mapvalues",
      "cases": [
        {
          "it": "can map values",
          "assertions": [
            {
              "query": "mapvalues @ + 1 { \"a\": 1, \"b\": 2, \"c\": 3 }",
              "data": {},
              "expected": { "a": 2, "b": 3, "c": 4 }
            }
          ]
        }
      ]
    },
    {
      "describe": "filtervalues",
      "cases": [
        {
          "it": "can filter values",
          "assertions": [
            {
              "query": "filtervalues @ > 1 { \"a\": 1, \"b\": 2, \"c\": 3 }",
              "data": {},
              "expected": { "b": 2, "c": 3 }
            }
          ]
        }
      ]
    },
    {
      "describe": "#mapkeys",
      "cases": [
        {
          "it": "can map keys",
          "assertions": [
            {
              "query": "mapkeys @ + \"suffix\" { \"a\": 1, \"b\": 2, \"c\": 3 }",
              "data": {},
              "expected": { "asuffix": 1, "bsuffix": 2, "csuffix": 3 }
            }
          ]
        }
      ]
    },
    {
      "describe": "#filterkeys",
      "cases": [
        {
          "it": "can filter keys",
          "assertions": [
            {
              "query": "filterkeys @ > \"b\" { \"a\": 1, \"b\": 2, \"c\": 3 }",
              "data": {},
              "expected": { "c": 3 }
            }
          ]
        }
      ]
    },
    {
      "describe": "#plus",
      "cases": [
        {
          "it": "can add numbers",
          "assertions": [
            {
              "query": "1 + 2",
              "data": {},
              "expected": 3
            }
          ]
        },
        {
          "it": "can add negative numbers",
          "assertions": [
            {
              "query": "-1 + 2",
              "data": {},
              "expected": 1
            }
          ]
        },
        {
          "it": "concatenates strings",
          "assertions": [
            {
              "query": "\"hello\" + \" \" + \"world\"",
              "data": {},
              "expected": "hello world"
            }
          ]
        },
        {
          "it": "concatenates arrays",
          "assertions": [
            {
              "query": "[1, 2] + [3, 4]",
              "data": {},
              "expected": [1, 2, 3, 4]
            }
          ]
        }
      ]
    },
    {
      "describe": "#[numerical binary operators]",
      "cases": [
        {
          "it": "can add numbers",
          "assertions": [
            {
              "query": "1 + 2",
              "data": {},
              "expected": 3
            }
          ]
        },
        {
          "it": "can subtract numbers",
          "assertions": [
            {
              "query": "1 - 2",
              "data": {},
              "expected": -1
            }
          ]
        },
        {
          "it": "can multiply numbers",
          "assertions": [
            {
              "query": "1 * 2",
              "data": {},
              "expected": 2
            },
            {
              "query": "1 * -2",
              "data": {},
              "expected": -2
            },
            {
              "query": "1 * 2 * 3",
              "data": {},
              "expected": 6
            },
            {
              "query": "1 * -2 * 3 * -4",
              "data": {},
              "expected": 24
            }
          ]
        },
        {
          "it": "can divide numbers",
          "assertions": [
            {
              "query": "1 / 2",
              "data": {},
              "expected": 0.5
            }
          ]
        },
        {
          "it": "can modulo numbers",
          "assertions": [
            {
              "query": "1 % 2",
              "data": {},
              "expected": 1
            }
          ]
        }
      ]
    },
    {
      "describe": "#[comparators]",
      "cases": [
        {
          "it": "can compare numbers",
          "assertions": [
            {
              "query": "1 == 2",
              "data": {},
              "expected": false
            },
            {
              "query": "1 == 1",
              "data": {},
              "expected": true
            },
            {
              "query": "1 != 2",
              "data": {},
              "expected": true
            },
            {
              "query": "1 != 1",
              "data": {},
              "expected": false
            },
            {
              "query": "1 > 2",
              "data": {},
              "expected": false
            },
            {
              "query": "1 > 1",
              "data": {},
              "expected": false
            },
            {
              "query": "1 >= 2",
              "data": {},
              "expected": false
            },
            {
              "query": "1 >= 1",
              "data": {},
              "expected": true
            },
            {
              "query": "1 < 2",
              "data": {},
              "expected": true
            },
            {
              "query": "1 < 1",
              "data": {},
              "expected": false
            },
            {
              "query": "1 <= 2",
              "data": {},
              "expected": true
            },
            {
              "query": "1 <= 1",
              "data": {},
              "expected": true
            }
          ]
        },
        {
          "it": "can compare strings",
          "assertions": [
            {
              "query": "\"a\" == \"b\"",
              "data": {},
              "expected": false
            },
            {
              "query": "\"a\" == \"a\"",
              "data": {},
              "expected": true
            },
            {
              "query": "\"a\" != \"b\"",
              "data": {},
              "expected": true
            },
            {
              "query": "\"a\" != \"a\"",
              "data": {},
              "expected": false
            },
            {
              "query": "\"a\" > \"b\"",
              "data": {},
              "expected": false
            },
            {
              "query": "\"a\" > \"a\"",
              "data": {},
              "expected": false
            },
            {
              "query": "\"a\" >= \"b\"",
              "data": {},
              "expected": false
            },
            {
              "query": "\"a\" >= \"a\"",
              "data": {},
              "expected": true
            },
            {
              "query": "\"a\" < \"b\"",
              "data": {},
              "expected": true
            },
            {
              "query": "\"a\" < \"a\"",
              "data": {},
              "expected": false
            },
            {
              "query": "\"a\" <= \"b\"",
              "data": {},
              "expected": true
            },
            {
              "query": "\"a\" <= \"a\"",
              "data": {},
              "expected": true
            }
          ]
        }
      ]
    },
    {
      "describe": "#find",
      "cases": [
        {
          "it": "selects the first matching element from an array",
          "assertions": [
            {
              "query": "find @ > 1 [1, 2, 3]",
              "data": {},
              "expected": 2
            }
          ]
        },
        {
          "it": "returns null if nothing satisfies the condition",
          "assertions": [
            {
              "query": "find @ > 4 [1, 2, 3]",
              "data": {},
              "expected": null
            }
          ]
        }
      ]
    },
    {
      "describe": "#index",
      "cases": [
        {
          "it": "correctly indexes arrays",
          "assertions": [
            {
              "query": "[1, 2, 3, 4, 5] | index 2",
              "data": {},
              "expected": 3
            }
          ]
        },
        {
          "it": "returns null if out of bounds",
          "assertions": [
            {
              "query": "[1, 2, 3, 4, 5] | index 5",
              "data": {},
              "expected": null
            }
          ]
        },
        {
          "it": "returns null if the array is empty",
          "assertions": [
            {
              "query": "[] | index 0",
              "data": {},
              "expected": null
            }
          ]
        },
        {
          "it": "correctly indexes strings",
          "assertions": [
            {
              "query": "\"abcdef\" | index 2",
              "data": {},
              "expected": "c"
            }
          ]
        },
        {
          "it": "allows negative indices for both strings and arrays",
          "assertions": [
            {
              "query": "[1, 2, 3, 4, 5] | index (-2)",
              "data": {},
              "expected": 4
            },
            {
              "query": "\"abcdef\" | index (-2)",
              "data": {},
              "expected": "e"
            }
          ]
        },
        {
          "it": "allows ranges",
          "assertions": [
            {
              "query": "[1, 2, 3, 4, 5] | index 2 4",
              "data": {},
              "expected": [3, 4]
            }
          ]
        },
        {
          "it": "allows ranges on strings",
          "assertions": [
            {
              "query": "\"abcdef\" | index 2 4",
              "data": {},
              "expected": "cd"
            }
          ]
        },
        {
          "it": "allows implicit beginnings and ends",
          "assertions": [
            {
              "query": "[1, 2, 3, 4, 5] | index 1 null",
              "data": {},
              "expected": [2, 3, 4, 5]
            },
            {
              "query": "[1, 2, 3, 4, 5] | index null (-1)",
              "data": {},
              "expected": [1, 2, 3, 4]
            }
          ]
        },
        {
          "it": "allows implicit beginnings and ends on strings",
          "assertions": [
            {
              "query": "\"abcdef\" | index 1 null",
              "data": {},
              "expected": "bcdef"
            },
            {
              "query": "\"abcdef\" | index null (-1)",
              "data": {},
              "expected": "abcde"
            }
          ]
        },
        {
          "it": "behaves identically to subscript syntax",
          "assertions": [
            {
              "query": "(@[0:0]) == (index 0 0 @)",
              "data": [1, {}, "3", 4, null],
              "expected": true
            },
            {
              "query": "(@[-1]) == (index (-1) @)",
              "data": [1, {}, "3", 4, null],
              "expected": true
            },
            {
              "query": "(@[-1:]) == (index (-1) null @)",
              "data": [1, {}, "3", 4, null],
              "expected": true
            },
            {
              "query": "(@[:-2]) == (index null (-2) @)",
              "data": [1, {}, "3", 4, null],
              "expected": true
            }
          ]
        }
      ]
    },
    {
      "describe": "#keys",
      "cases": [
        {
          "it": "returns the keys of an object",
          "assertions": [
            {
              "query": "{a: 1, b: 2} | keys",
              "data": {},
              "expected": ["a", "b"]
            }
          ]
        },
        {
          "it": "returns an empty array if the object is empty",
          "assertions": [
            {
              "query": "{} | keys",
              "data": {},
              "expected": []
            }
          ]
        }
      ]
    },
    {
      "describe": "#values",
      "cases": [
        {
          "it": "returns the values of an object",
          "assertions": [
            {
              "query": "{a: 1, b: 2} | values",
              "data": {},
              "expected": [1, 2]
            }
          ]
        },
        {
          "it": "returns an empty array if the object is empty",
          "assertions": [
            {
              "query": "{} | values",
              "data": {},
              "expected": []
            }
          ]
        }
      ]
    },
    {
      "describe": "#groupby",
      "cases": [
        {
          "it": "groups an array by a key",
          "assertions": [
            {
              "query": "[{a: 1}, {a: 2}, {a: 3}] | groupby a",
              "data": {},
              "expected": {
                "1": [{ "a": 1 }],
                "2": [{ "a": 2 }],
                "3": [{ "a": 3 }]
              }
            }
          ]
        },
        {
          "it": "correctly groups events",
          "assertions": [
            {
              "query": "events | groupby email",
              "data": {
                "events": [
                  { "type": "signup", "email": "test1@example.com" },
                  { "type": "signup", "email": "test2@example.com" },
                  { "type": "play", "email": "test2@example.com" },
                  { "type": "play", "email": "test2@example.com" }
                ]
              },
              "expected": {
                "test1@example.com": [
                  {
                    "email": "test1@example.com",
                    "type": "signup"
                  }
                ],
                "test2@example.com": [
                  {
                    "email": "test2@example.com",
                    "type": "signup"
                  },
                  {
                    "email": "test2@example.com",
                    "type": "play"
                  },
                  {
                    "email": "test2@example.com",
                    "type": "play"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
