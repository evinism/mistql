{
  "data": [
    {
      "describe": "basics",
      "cases": [
        {
          "describe": "IO roundtrip",
          "cases": [
            {
              "it": "inputs/outputs arrays",
              "assertions": [
                {
                  "query": "@",
                  "data": [
                    1,
                    2,
                    3
                  ],
                  "expected": [
                    1,
                    2,
                    3
                  ]
                }
              ]
            },
            {
              "it": "inputs/outputs objects",
              "assertions": [
                {
                  "query": "@",
                  "data": {
                    "a": 1,
                    "b": 2,
                    "c": 3
                  },
                  "expected": {
                    "a": 1,
                    "b": 2,
                    "c": 3
                  }
                }
              ]
            },
            {
              "it": "inputs/outputs numbers",
              "assertions": [
                {
                  "query": "@",
                  "data": 100000,
                  "expected": 100000
                },
                {
                  "query": "@",
                  "data": -100000,
                  "expected": -100000
                },
                {
                  "query": "@",
                  "data": 0,
                  "expected": 0
                },
                {
                  "query": "@",
                  "data": 30.5,
                  "expected": 30.5
                }
              ]
            },
            {
              "it": "inputs/outputs strings",
              "assertions": [
                {
                  "query": "@",
                  "data": "hello",
                  "expected": "hello"
                },
                {
                  "query": "@",
                  "data": "",
                  "expected": ""
                }
              ]
            },
            {
              "it": "inputs/outputs booleans",
              "assertions": [
                {
                  "query": "@",
                  "data": true,
                  "expected": true
                },
                {
                  "query": "@",
                  "data": false,
                  "expected": false
                }
              ]
            },
            {
              "it": "inputs/outputs null",
              "assertions": [
                {
                  "query": "@",
                  "data": null,
                  "expected": null
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "describe": "builtins",
      "cases": [
        {
          "describe": "#map",
          "cases": [
            {
              "it": "correctly maps simple values",
              "assertions": [
                {
                  "query": "map @ + 1 [1, 2, 3]",
                  "data": {},
                  "expected": [
                    2,
                    3,
                    4
                  ]
                }
              ]
            },
            {
              "it": "correctly maps objecty values",
              "assertions": [
                {
                  "query": "map (feature + 1) arr",
                  "data": {
                    "arr": [
                      {
                        "feature": 1
                      },
                      {
                        "feature": 2
                      },
                      {
                        "feature": 3
                      }
                    ]
                  },
                  "expected": [
                    2,
                    3,
                    4
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#filter",
          "cases": [
            {
              "it": "correctly filters simple values",
              "assertions": [
                {
                  "query": "filter @ > 1 [1, 2, 3]",
                  "data": {},
                  "expected": [
                    2,
                    3
                  ]
                }
              ]
            },
            {
              "it": "correctly filters objecty values",
              "assertions": [
                {
                  "query": "filter (feature > 1) arr",
                  "data": {
                    "arr": [
                      {
                        "feature": 1
                      },
                      {
                        "feature": 2
                      },
                      {
                        "feature": 3
                      }
                    ]
                  },
                  "expected": [
                    {
                      "feature": 2
                    },
                    {
                      "feature": 3
                    }
                  ]
                }
              ]
            },
            {
              "it": "correctly filters events",
              "assertions": [
                {
                  "query": "events | filter type == \"hi\"",
                  "data": {
                    "events": [
                      {
                        "type": "hi"
                      },
                      {
                        "type": "hello"
                      },
                      {
                        "type": "hi"
                      }
                    ]
                  },
                  "expected": [
                    {
                      "type": "hi"
                    },
                    {
                      "type": "hi"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#reduce",
          "cases": [
            {
              "it": "can sum",
              "assertions": [
                {
                  "query": "reduce @[0] + @[1] 0 @",
                  "data": [
                    1,
                    4,
                    5,
                    7,
                    8
                  ],
                  "expected": 25
                }
              ]
            }
          ]
        },
        {
          "describe": "#mapvalues",
          "cases": [
            {
              "it": "can map values",
              "assertions": [
                {
                  "query": "mapvalues @ + 1 { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "a": 2,
                    "b": 3,
                    "c": 4
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "filtervalues",
          "cases": [
            {
              "it": "can filter values",
              "assertions": [
                {
                  "query": "filtervalues @ > 1 { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "b": 2,
                    "c": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#mapkeys",
          "cases": [
            {
              "it": "can map keys",
              "assertions": [
                {
                  "query": "mapkeys @ + \"suffix\" { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "asuffix": 1,
                    "bsuffix": 2,
                    "csuffix": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#filterkeys",
          "cases": [
            {
              "it": "can filter keys",
              "assertions": [
                {
                  "query": "filterkeys @ > \"b\" { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "c": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#plus",
          "cases": [
            {
              "it": "can add numbers",
              "assertions": [
                {
                  "query": "1 + 2",
                  "data": {},
                  "expected": 3
                }
              ]
            },
            {
              "it": "can add negative numbers",
              "assertions": [
                {
                  "query": "-1 + 2",
                  "data": {},
                  "expected": 1
                }
              ]
            },
            {
              "it": "concatenates strings",
              "assertions": [
                {
                  "query": "\"hello\" + \" \" + \"world\"",
                  "data": {},
                  "expected": "hello world"
                }
              ]
            },
            {
              "it": "concatenates arrays",
              "assertions": [
                {
                  "query": "[1, 2] + [3, 4]",
                  "data": {},
                  "expected": [
                    1,
                    2,
                    3,
                    4
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#[numerical binary operators]",
          "cases": [
            {
              "it": "can add numbers",
              "assertions": [
                {
                  "query": "1 + 2",
                  "data": {},
                  "expected": 3
                }
              ]
            },
            {
              "it": "can subtract numbers",
              "assertions": [
                {
                  "query": "1 - 2",
                  "data": {},
                  "expected": -1
                }
              ]
            },
            {
              "it": "can multiply numbers",
              "assertions": [
                {
                  "query": "1 * 2",
                  "data": {},
                  "expected": 2
                },
                {
                  "query": "1 * -2",
                  "data": {},
                  "expected": -2
                },
                {
                  "query": "1 * 2 * 3",
                  "data": {},
                  "expected": 6
                },
                {
                  "query": "1 * -2 * 3 * -4",
                  "data": {},
                  "expected": 24
                }
              ]
            },
            {
              "it": "can divide numbers",
              "assertions": [
                {
                  "query": "1 / 2",
                  "data": {},
                  "expected": 0.5
                }
              ]
            },
            {
              "it": "can modulo numbers",
              "assertions": [
                {
                  "query": "1 % 2",
                  "data": {},
                  "expected": 1
                }
              ]
            }
          ]
        },
        {
          "describe": "#[comparators]",
          "cases": [
            {
              "it": "can compare numbers",
              "assertions": [
                {
                  "query": "1 == 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 == 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 != 2",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 != 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 > 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 > 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 >= 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 >= 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 < 2",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 < 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 <= 2",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 <= 1",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "can compare strings",
              "assertions": [
                {
                  "query": "\"a\" == \"b\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" == \"a\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" != \"b\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" != \"a\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" > \"b\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" > \"a\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" >= \"b\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" >= \"a\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" < \"b\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" < \"a\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" <= \"b\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" <= \"a\"",
                  "data": {},
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#find",
          "cases": [
            {
              "it": "selects the first matching element from an array",
              "assertions": [
                {
                  "query": "find @ > 1 [1, 2, 3]",
                  "data": {},
                  "expected": 2
                }
              ]
            },
            {
              "it": "returns null if nothing satisfies the condition",
              "assertions": [
                {
                  "query": "find @ > 4 [1, 2, 3]",
                  "data": {},
                  "expected": null
                }
              ]
            }
          ]
        },
        {
          "describe": "#index",
          "cases": [
            {
              "it": "correctly indexes arrays",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 2",
                  "data": {},
                  "expected": 3
                }
              ]
            },
            {
              "it": "returns null if out of bounds",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 5",
                  "data": {},
                  "expected": null
                }
              ]
            },
            {
              "it": "returns null if the array is empty",
              "assertions": [
                {
                  "query": "[] | index 0",
                  "data": {},
                  "expected": null
                }
              ]
            },
            {
              "it": "correctly indexes strings",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 2",
                  "data": {},
                  "expected": "c"
                }
              ]
            },
            {
              "it": "allows negative indices for both strings and arrays",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index (-2)",
                  "data": {},
                  "expected": 4
                },
                {
                  "query": "\"abcdef\" | index (-2)",
                  "data": {},
                  "expected": "e"
                }
              ]
            },
            {
              "it": "allows ranges",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 2 4",
                  "data": {},
                  "expected": [
                    3,
                    4
                  ]
                }
              ]
            },
            {
              "it": "allows ranges on strings",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 2 4",
                  "data": {},
                  "expected": "cd"
                }
              ]
            },
            {
              "it": "allows implicit beginnings and ends",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 1 null",
                  "data": {},
                  "expected": [
                    2,
                    3,
                    4,
                    5
                  ]
                },
                {
                  "query": "[1, 2, 3, 4, 5] | index null (-1)",
                  "data": {},
                  "expected": [
                    1,
                    2,
                    3,
                    4
                  ]
                }
              ]
            },
            {
              "it": "allows implicit beginnings and ends on strings",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 1 null",
                  "data": {},
                  "expected": "bcdef"
                },
                {
                  "query": "\"abcdef\" | index null (-1)",
                  "data": {},
                  "expected": "abcde"
                }
              ]
            },
            {
              "it": "behaves identically to subscript syntax",
              "assertions": [
                {
                  "query": "(@[0:0]) == (index 0 0 @)",
                  "data": [
                    1,
                    {},
                    "3",
                    4,
                    null
                  ],
                  "expected": true
                },
                {
                  "query": "(@[-1]) == (index (-1) @)",
                  "data": [
                    1,
                    {},
                    "3",
                    4,
                    null
                  ],
                  "expected": true
                },
                {
                  "query": "(@[-1:]) == (index (-1) null @)",
                  "data": [
                    1,
                    {},
                    "3",
                    4,
                    null
                  ],
                  "expected": true
                },
                {
                  "query": "(@[:-2]) == (index null (-2) @)",
                  "data": [
                    1,
                    {},
                    "3",
                    4,
                    null
                  ],
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#keys",
          "cases": [
            {
              "it": "returns the keys of an object",
              "assertions": [
                {
                  "query": "{a: 1, b: 2} | keys",
                  "data": {},
                  "expected": [
                    "a",
                    "b"
                  ]
                }
              ]
            },
            {
              "it": "returns an empty array if the object is empty",
              "assertions": [
                {
                  "query": "{} | keys",
                  "data": {},
                  "expected": []
                }
              ]
            }
          ]
        },
        {
          "describe": "#values",
          "cases": [
            {
              "it": "returns the values of an object",
              "assertions": [
                {
                  "query": "{a: 1, b: 2} | values",
                  "data": {},
                  "expected": [
                    1,
                    2
                  ]
                }
              ]
            },
            {
              "it": "returns an empty array if the object is empty",
              "assertions": [
                {
                  "query": "{} | values",
                  "data": {},
                  "expected": []
                }
              ]
            }
          ]
        },
        {
          "describe": "#groupby",
          "cases": [
            {
              "it": "groups an array by a key",
              "assertions": [
                {
                  "query": "[{a: 1}, {a: 2}, {a: 3}] | groupby a",
                  "data": {},
                  "expected": {
                    "1": [
                      {
                        "a": 1
                      }
                    ],
                    "2": [
                      {
                        "a": 2
                      }
                    ],
                    "3": [
                      {
                        "a": 3
                      }
                    ]
                  }
                }
              ]
            },
            {
              "it": "correctly groups events",
              "assertions": [
                {
                  "query": "events | groupby email",
                  "data": {
                    "events": [
                      {
                        "type": "signup",
                        "email": "test1@example.com"
                      },
                      {
                        "type": "signup",
                        "email": "test2@example.com"
                      },
                      {
                        "type": "play",
                        "email": "test2@example.com"
                      },
                      {
                        "type": "play",
                        "email": "test2@example.com"
                      }
                    ]
                  },
                  "expected": {
                    "test1@example.com": [
                      {
                        "email": "test1@example.com",
                        "type": "signup"
                      }
                    ],
                    "test2@example.com": [
                      {
                        "email": "test2@example.com",
                        "type": "signup"
                      },
                      {
                        "email": "test2@example.com",
                        "type": "play"
                      },
                      {
                        "email": "test2@example.com",
                        "type": "play"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#sort",
          "cases": [
            {
              "it": "sensibly sorts numbers",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | sort",
                  "data": {},
                  "expected": [
                    1,
                    2,
                    3,
                    4,
                    5
                  ]
                },
                {
                  "query": "[11, 2, 32, 104, 5] | sort",
                  "data": {},
                  "expected": [
                    2,
                    5,
                    11,
                    32,
                    104
                  ]
                }
              ]
            },
            {
              "it": "sensibly sorts strings",
              "assertions": [
                {
                  "query": "[\"banana\", \"apple\", \"carrot\", \"cabbage\"] | sort",
                  "data": {},
                  "expected": [
                    "apple",
                    "banana",
                    "cabbage",
                    "carrot"
                  ]
                }
              ]
            },
            {
              "it": "sensibly sorts booleans",
              "assertions": [
                {
                  "query": "[true, false, true, false] | sort",
                  "data": {},
                  "expected": [
                    false,
                    false,
                    true,
                    true
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#sortby",
          "cases": [
            {
              "it": "sensibly sorts items based on the specified expression",
              "assertions": [
                {
                  "query": "[{sk: 11}, {sk: 2}, {sk: 32}, {sk: 104}, {sk: 5}] | sortby sk",
                  "data": {},
                  "expected": [
                    {
                      "sk": 2
                    },
                    {
                      "sk": 5
                    },
                    {
                      "sk": 11
                    },
                    {
                      "sk": 32
                    },
                    {
                      "sk": 104
                    }
                  ]
                },
                {
                  "query": "[{a: 3}, {a: 1}, {a: 2}] | sortby a | map a",
                  "data": {},
                  "expected": [
                    1,
                    2,
                    3
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#reverse",
          "cases": [
            {
              "it": "reverses an array",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | reverse",
                  "data": {},
                  "expected": [
                    5,
                    4,
                    3,
                    2,
                    1
                  ]
                }
              ]
            },
            {
              "it": "handles empty arrays",
              "assertions": [
                {
                  "query": "[] | reverse",
                  "data": {},
                  "expected": []
                }
              ]
            }
          ]
        },
        {
          "describe": "#if",
          "cases": [
            {
              "it": "returns the first value if the condition is true",
              "assertions": [
                {
                  "query": "if true 1 2",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "if arg left right",
                  "data": {
                    "arg": 1,
                    "left": 2,
                    "right": 3
                  },
                  "expected": 2
                }
              ]
            },
            {
              "it": "returns the second value if the condition is false",
              "assertions": [
                {
                  "query": "if false 1 2",
                  "data": {},
                  "expected": 2
                },
                {
                  "query": "if arg left right",
                  "data": {
                    "arg": 0,
                    "left": 2,
                    "right": 3
                  },
                  "expected": 3
                }
              ]
            }
          ]
        },
        {
          "describe": "#dotaccessor",
          "cases": [
            {
              "it": "correctly selects deep values",
              "assertions": [
                {
                  "query": "hello.over.there",
                  "data": {
                    "hello": {
                      "over": {
                        "there": "world"
                      }
                    }
                  },
                  "expected": "world"
                }
              ]
            },
            {
              "it": "allows complex lhs expressions",
              "assertions": [
                {
                  "query": "(@ | apply @[0]).hello",
                  "data": [
                    {
                      "hello": "world"
                    }
                  ],
                  "expected": "world"
                }
              ]
            },
            {
              "it": "returns null on unknown key",
              "assertions": [
                {
                  "query": "hello.bar",
                  "data": {
                    "hello": {
                      "foo": "world"
                    }
                  },
                  "expected": null
                }
              ]
            },
            {
              "it": "implements null coalescing by default",
              "assertions": [
                {
                  "query": "one.two.three.four",
                  "data": {
                    "one": {}
                  },
                  "expected": null
                }
              ]
            }
          ]
        },
        {
          "describe": "#log",
          "cases": [
            {
              "it": "passes values through without modification",
              "assertions": [
                {
                  "query": "log 1",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "log true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "log \"hello\"",
                  "data": {},
                  "expected": "hello"
                },
                {
                  "query": "log [1, 2, 3]",
                  "data": {},
                  "expected": [
                    1,
                    2,
                    3
                  ]
                },
                {
                  "query": "log {a: 1, b: 2}",
                  "data": {},
                  "expected": {
                    "a": 1,
                    "b": 2
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#summarize",
          "cases": [
            {
              "it": "summarizes a array of numbers",
              "assertions": [
                {
                  "query": "summarize [1, 2, 5, 10, 12]",
                  "data": {},
                  "expected": {
                    "min": 1,
                    "max": 12,
                    "mean": 6,
                    "median": 5,
                    "stddev": 4.33589667773576,
                    "variance": 18.8
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#sequence",
          "cases": [
            {
              "it": "finds sequences that satisfy the constraints",
              "assertions": [
                {
                  "query": "@ | sequence type == \"chat\" type == \"convert\"",
                  "data": [
                    {
                      "type": "convert",
                      "data": "one"
                    },
                    {
                      "type": "chat",
                      "data": "two"
                    },
                    {
                      "type": "convert",
                      "data": "three"
                    },
                    {
                      "type": "convert",
                      "data": "four"
                    },
                    {
                      "type": "chat",
                      "data": "five"
                    },
                    {
                      "type": "convert",
                      "data": "six"
                    }
                  ],
                  "expected": [
                    [
                      {
                        "type": "chat",
                        "data": "two"
                      },
                      {
                        "type": "convert",
                        "data": "three"
                      }
                    ],
                    [
                      {
                        "type": "chat",
                        "data": "two"
                      },
                      {
                        "type": "convert",
                        "data": "four"
                      }
                    ],
                    [
                      {
                        "type": "chat",
                        "data": "two"
                      },
                      {
                        "type": "convert",
                        "data": "six"
                      }
                    ],
                    [
                      {
                        "type": "chat",
                        "data": "five"
                      },
                      {
                        "type": "convert",
                        "data": "six"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#replace",
          "cases": [
            {
              "it": "correctly replaces string values",
              "assertions": [
                {
                  "query": "\"hello\" | replace \"ll\" \"zop\"",
                  "data": {},
                  "expected": "hezopo"
                }
              ]
            },
            {
              "it": "accepts a regex for as the selector",
              "assertions": [
                {
                  "query": "\"hello\" | replace (regex \"l+\") \"zop\"",
                  "data": {},
                  "expected": "hezopo"
                }
              ]
            },
            {
              "it": "allows flagged regexes",
              "assertions": [
                {
                  "query": "\"hello\" | replace (regex \"l\" \"g\") \"zop\"",
                  "data": {},
                  "expected": "hezopzopo"
                }
              ]
            },
            {
              "it": "replaces only the first instance by default",
              "assertions": [
                {
                  "query": "\"hello\" | replace \"l\" \"za\"",
                  "data": {},
                  "expected": "hezalo"
                }
              ]
            }
          ]
        },
        {
          "describe": "#match/#regex",
          "cases": [
            {
              "it": "correctly matches regexes",
              "assertions": [
                {
                  "query": "\"hello\" | match (regex \"he..o\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match (regex \"he..a\")",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "allows flagged regexes",
              "assertions": [
                {
                  "query": "\"Hello\" | match (regex \"[a-z]ello\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"Hello\" | match (regex \"[a-z]ello\" \"i\")",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "allows matching via the =~ operator",
              "assertions": [
                {
                  "query": "\"Hello\" =~ (regex \"[a-z]ello\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"Hello\" =~ (regex \"[a-z]ello\" \"i\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"my name is mister cool guy\" =~ (regex \"[a-z ]*\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"my name is #1 cool guy\" =~ (regex \"[a-z ]*\")",
                  "data": {},
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#equal",
          "cases": [
            {
              "it": "compares strings correctly",
              "assertions": [
                {
                  "query": "\"hello\" == \"hello\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" == \"world\"",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares numbers correctly",
              "assertions": [
                {
                  "query": "1 == 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 == 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1.0 == 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1.0 == -1",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares nulls correctly",
              "assertions": [
                {
                  "query": "null == null",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "null == 1",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "evaluates to false when comparing different types",
              "assertions": [
                {
                  "query": "1 == \"1\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 == null",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "null == 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "0 == null",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"false\" == false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true == \"true\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true == []",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "false == []",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[] == {}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{} == []",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares arrays correctly",
              "assertions": [
                {
                  "query": "[] == []",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[1, 2, 3] == [1, 2, 3]",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[1, 2, 3] == [1, 2, 3, 4]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[1, 2, 3] == [1, 2, 4]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[[], [], [[]], [4]] == [[], [], [[]], [4]]",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[[], [], [[]], [3]] == [[], [], [[]], [4]]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[[], [], [], [4]] == [[], [], [[]], [4]]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[\"hello\", \"there\"] == [\"hello\", \"there\"]",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[\"hello\", \"there\"] == [\"hello\", \"thoo\"]",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares objects correctly",
              "assertions": [
                {
                  "query": "{} == {}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{a: true} == {}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1} == {\"a\": 1}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{\"a\": 1} == {\"a\": 2}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{a: { b: []}} == {a: { b: []}}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{a: { b: []}} == {a: { b: [{}]}}",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares regexes on source and flags",
              "assertions": [
                {
                  "query": "(regex \"i+\") == (regex \"i+\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "(regex \"j+\") == (regex \"i+\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "(regex \"beep boop\") == (regex \"i+\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "(regex \"i+\" \"g\") == (regex \"i+\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "(regex \"i+\" \"g\") == (regex \"i+\" \"g\")",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "compares booleans correctly",
              "assertions": [
                {
                  "query": "true == true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "false == false",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true == false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "false == true",
                  "data": {},
                  "expected": false
                }
              ]
            }
          ]
        },
        {
          "describe": "#split",
          "cases": [
            {
              "it": "splits basic strings",
              "assertions": [
                {
                  "query": "split \"hi\" @",
                  "data": "ahi tuna",
                  "expected": [
                    "a",
                    " tuna"
                  ]
                },
                {
                  "query": "split \"\" @",
                  "data": "ahi tuna",
                  "expected": [
                    "a",
                    "h",
                    "i",
                    " ",
                    "t",
                    "u",
                    "n",
                    "a"
                  ]
                }
              ]
            },
            {
              "it": "splits via regexes",
              "assertions": [
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi there",
                  "expected": [
                    "hi",
                    "there"
                  ]
                },
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi\r\n\r\nthere",
                  "expected": [
                    "hi",
                    "there"
                  ]
                },
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi\r\n\r\n\nthere",
                  "expected": [
                    "hi",
                    "there"
                  ]
                }
              ]
            },
            {
              "it": "splits everywhere even with a non-global regex",
              "assertions": [
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi there friend!!",
                  "expected": [
                    "hi",
                    "there",
                    "friend!!"
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#join",
          "cases": [
            {
              "it": "joins basic strings",
              "assertions": [
                {
                  "query": "join \"\" @",
                  "data": [
                    "a",
                    "b",
                    "c"
                  ],
                  "expected": "abc"
                }
              ]
            },
            {
              "it": "joins with a delimiter",
              "assertions": [
                {
                  "query": "join \" \" @",
                  "data": [
                    "a",
                    "b",
                    "c"
                  ],
                  "expected": "a b c"
                }
              ]
            },
            {
              "it": "round-trips with split",
              "assertions": [
                {
                  "query": "(split \":\" @ | join \":\") == @",
                  "data": "hello:hi:cattt:",
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#entries",
          "cases": [
            {
              "it": "returns an array of entries",
              "assertions": [
                {
                  "query": "entries @",
                  "data": {
                    "a": 1,
                    "b": 2
                  },
                  "expected": [
                    [
                      "a",
                      1
                    ],
                    [
                      "b",
                      2
                    ]
                  ]
                },
                {
                  "it": "round-trips with fromentries",
                  "query": "(entries @ | fromentries) == @",
                  "data": {
                    "a": 1,
                    "b": 2
                  },
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#fromentries",
          "cases": [
            {
              "it": "returns an object from an array of entries",
              "assertions": [
                {
                  "query": "fromentries @",
                  "data": [
                    [
                      "a",
                      1
                    ],
                    [
                      "b",
                      2
                    ]
                  ],
                  "expected": {
                    "a": 1,
                    "b": 2
                  }
                }
              ]
            },
            {
              "it": "uses nulls for missing values",
              "assertions": [
                {
                  "query": "fromentries @",
                  "data": [
                    [
                      "a",
                      1
                    ],
                    [
                      "b"
                    ],
                    []
                  ],
                  "expected": {
                    "a": 1,
                    "b": null,
                    "null": null
                  }
                }
              ]
            },
            {
              "it": "casts non-string keys to strings",
              "assertions": [
                {
                  "query": "fromentries @",
                  "data": [
                    [
                      {},
                      1
                    ],
                    [
                      [
                        1,
                        2,
                        3
                      ],
                      2
                    ]
                  ],
                  "expected": {
                    "{}": 1,
                    "[1,2,3]": 2
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#string",
          "cases": [
            {
              "it": "returns a string",
              "assertions": [
                {
                  "query": "string @",
                  "data": "hi",
                  "expected": "hi"
                }
              ]
            },
            {
              "it": "returns a string from a number",
              "assertions": [
                {
                  "query": "string @",
                  "data": 1,
                  "expected": "1"
                }
              ]
            },
            {
              "it": "returns a string from a boolean",
              "assertions": [
                {
                  "query": "string @",
                  "data": true,
                  "expected": "true"
                }
              ]
            },
            {
              "it": "returns a string from a null",
              "assertions": [
                {
                  "query": "string @",
                  "data": null,
                  "expected": "null"
                }
              ]
            },
            {
              "it": "returns a string from an array",
              "assertions": [
                {
                  "query": "string @",
                  "data": [
                    "hi",
                    "there"
                  ],
                  "expected": "[\"hi\",\"there\"]"
                }
              ]
            }
          ]
        },
        {
          "describe": "#float",
          "cases": [
            {
              "it": "returns a float",
              "assertions": [
                {
                  "query": "float @",
                  "data": 1.5,
                  "expected": 1.5
                }
              ]
            },
            {
              "it": "returns a float from a number",
              "assertions": [
                {
                  "query": "float @",
                  "data": 1,
                  "expected": 1
                }
              ]
            },
            {
              "it": "returns a float from a boolean",
              "assertions": [
                {
                  "query": "float @",
                  "data": true,
                  "expected": 1
                },
                {
                  "query": "float @",
                  "data": false,
                  "expected": 0
                }
              ]
            },
            {
              "it": "returns a float from a null",
              "assertions": [
                {
                  "query": "float @",
                  "data": null,
                  "expected": 0
                }
              ]
            }
          ]
        },
        {
          "describe": "#apply",
          "cases": [
            {
              "it": "allows easy modification to a value via piping",
              "assertions": [
                {
                  "query": "@ | apply @ + 1",
                  "data": 1,
                  "expected": 2
                },
                {
                  "query": "@ | apply @ + 1 | apply @ + 2",
                  "data": 1,
                  "expected": 4
                }
              ]
            },
            {
              "it": "defines intermediate variables from the context variable",
              "assertions": [
                {
                  "query": "@ | apply a",
                  "data": {
                    "a": -1,
                    "b": -2
                  },
                  "expected": -1
                },
                {
                  "query": "@ | apply b",
                  "data": {
                    "a": -1,
                    "b": -2
                  },
                  "expected": -2
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}