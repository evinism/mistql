{
  "data": [
    {
      "describe": "language-level behavior",
      "cases": [
        {
          "describe": "IO roundtrip",
          "cases": [
            {
              "it": "inputs/outputs arrays",
              "assertions": [
                {
                  "query": "@",
                  "data": [1, 2, 3],
                  "expected": [1, 2, 3]
                }
              ]
            },
            {
              "it": "inputs/outputs objects",
              "assertions": [
                {
                  "query": "@",
                  "data": {
                    "a": 1,
                    "b": 2,
                    "c": 3
                  },
                  "expected": {
                    "a": 1,
                    "b": 2,
                    "c": 3
                  }
                }
              ]
            },
            {
              "it": "inputs/outputs numbers",
              "assertions": [
                {
                  "query": "@",
                  "data": 100000,
                  "expected": 100000
                },
                {
                  "query": "@",
                  "data": -100000,
                  "expected": -100000
                },
                {
                  "query": "@",
                  "data": 0,
                  "expected": 0
                },
                {
                  "query": "@",
                  "data": 30.5,
                  "expected": 30.5
                }
              ]
            },
            {
              "it": "inputs/outputs strings",
              "assertions": [
                {
                  "query": "@",
                  "data": "hello",
                  "expected": "hello"
                },
                {
                  "query": "@",
                  "data": "",
                  "expected": ""
                }
              ]
            },
            {
              "it": "roundtrips unicode characters",
              "assertions": [
                {
                  "query": "@",
                  "data": "üí©",
                  "expected": "üí©"
                },
                {
                  "query": "@",
                  "data": ",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô",
                  "expected": ",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô"
                },
                {
                  "query": "@",
                  "data": "üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç",
                  "expected": "üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç"
                }
              ]
            },
            {
              "it": "inputs/outputs booleans",
              "assertions": [
                {
                  "query": "@",
                  "data": true,
                  "expected": true
                },
                {
                  "query": "@",
                  "data": false,
                  "expected": false
                }
              ]
            },
            {
              "it": "inputs/outputs null",
              "assertions": [
                {
                  "query": "@",
                  "data": null,
                  "expected": null
                }
              ]
            }
          ]
        },
        {
          "describe": "value parsing",
          "cases": [
            {
              "it": "parses numbers",
              "assertions": [
                {
                  "query": "100000",
                  "data": null,
                  "expected": 100000
                },
                {
                  "query": "-100000",
                  "data": null,
                  "expected": -100000
                },
                {
                  "query": "0",
                  "data": null,
                  "expected": 0
                },
                {
                  "query": "30.5",
                  "data": null,
                  "expected": 30.5
                },
                {
                  "query": "-30.5",
                  "data": null,
                  "expected": -30.5
                },
                {
                  "query": "-30.5e-2",
                  "data": null,
                  "expected": -0.305
                },
                {
                  "query": "4.9E-50",
                  "data": null,
                  "expected": 4.9e-50
                },
                {
                  "query": "4.9E50",
                  "data": null,
                  "expected": 4.9e50
                },
                {
                  "query": "0.9",
                  "data": null,
                  "expected": 0.9
                },
                {
                  "query": "0.9.5",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "0.0.5",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "parses numbers which end with a decimal point",
              "assertions": [
                {
                  "query": "0.",
                  "data": null,
                  "expected": 0
                },
                {
                  "query": "5.",
                  "data": null,
                  "expected": 5
                },
                {
                  "query": "(5.)",
                  "data": null,
                  "expected": 5
                },
                {
                  "query": "-9.e2",
                  "data": null,
                  "expected": -900
                }
              ]
            },
            {
              "it": "fails to parse numbers which end in a decimal point followed by a non-digit",
              "assertions": [
                {
                  "query": "0.5.",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "0.5e",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "0.n",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "parses strings",
              "assertions": [
                {
                  "query": "\"hello\"",
                  "data": null,
                  "expected": "hello"
                },
                {
                  "query": "\"\"",
                  "data": null,
                  "expected": ""
                },
                {
                  "query": "\"\\\"\"",
                  "data": null,
                  "expected": "\""
                },
                {
                  "query": "\"\\u0022\\\\\\\"\"",
                  "data": null,
                  "expected": "\"\\\""
                },
                {
                  "query": "\"\\u0022\\\\\\\"\\b\\r\\n\"",
                  "data": null,
                  "expected": "\"\\\"\b\r\n"
                },
                {
                  "query": "\"\\\\s\"",
                  "data": null,
                  "expected": "\\s"
                }
              ]
            },
            {
              "it": "parses booleans",
              "assertions": [
                {
                  "query": "true",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "false",
                  "data": null,
                  "expected": false
                }
              ]
            },
            {
              "it": "parses null",
              "assertions": [
                {
                  "query": "null",
                  "data": null,
                  "expected": null
                }
              ]
            },
            {
              "it": "parses arrays",
              "assertions": [
                {
                  "query": "[]",
                  "data": null,
                  "expected": []
                },
                {
                  "query": "[1, 2, 3]",
                  "data": null,
                  "expected": [1, 2, 3]
                },
                {
                  "query": "[[],[],[[[[],[],[[[]],[\"dog\"]]]]],[],\"cat\"]",
                  "data": null,
                  "expected": [[], [], [[[[], [], [[[]], ["dog"]]]]], [], "cat"]
                }
              ]
            },
            {
              "it": "parses objects",
              "assertions": [
                {
                  "query": "{}",
                  "data": null,
                  "expected": {}
                },
                {
                  "query": "{\"hello\": \"\\nthere\"}",
                  "data": null,
                  "expected": {
                    "hello": "\nthere"
                  }
                },
                {
                  "query": "{\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": null,
                  "expected": {
                    "a": 1,
                    "b": 2,
                    "c": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "Misc behavior",
          "cases": [
            {
              "it": "supports truth tables",
              "assertions": [
                {
                  "query": "!!{}",
                  "data": null,
                  "expected": false
                },
                {
                  "query": "!!{foo: \"bar\"}",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!![]",
                  "data": null,
                  "expected": false
                },
                {
                  "query": "!![0]",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!!\"\"",
                  "data": null,
                  "expected": false
                },
                {
                  "query": "!!\"hi\"",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!!0",
                  "data": null,
                  "expected": false
                },
                {
                  "query": "!!1",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!!(regex \"\")",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!!(regex \"hi\")",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!!(regex \"hi\")",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "!!float",
                  "data": null,
                  "expected": true
                }
              ]
            },
            {
              "it": "fails to output non-external types",
              "assertions": [
                {
                  "query": "map",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "{a: count}",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "[[[[[groupby]]]]]",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "[regex \"x\"]",
                  "data": null,
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "weird overwriting stuff",
          "cases": [
            {
              "it": "doesn't overwrite binary operators",
              "assertions": [
                {
                  "query": "1 + 1 - 1 * 1 / 1",
                  "data": {
                    "+": 1,
                    "*": 1,
                    "-": 1,
                    "/": 1
                  },
                  "expected": 1
                }
              ]
            },
            {
              "it": "doesn't overwrite indexing",
              "assertions": [
                {
                  "query": "[1, 2, 3][1]",
                  "data": {
                    "index": "hello"
                  },
                  "expected": 2
                }
              ]
            },
            {
              "it": "still allows values from higher scopes in lower scopes",
              "assertions": [
                {
                  "query": "f | apply @ + g",
                  "data": {
                    "f": 1,
                    "g": 2
                  },
                  "expected": 3
                }
              ]
            },
            {
              "it": "allows us to filter on values that overlap with builtin names",
              "assertions": [
                {
                  "query": "[{filter: \"hp\"}, {filter: \"lp\"}] | filter filter == \"lp\"",
                  "data": null,
                  "expected": [
                    {
                      "filter": "lp"
                    }
                  ]
                }
              ]
            },
            {
              "it": "overwrites the default variable in a name conflict",
              "assertions": [
                {
                  "query": "filter",
                  "data": {
                    "filter": "cat"
                  },
                  "expected": "cat"
                }
              ]
            },
            {
              "it": "allows us to unoverwrite using the $ key",
              "assertions": [
                {
                  "query": "$.filter @ > 1 nums",
                  "data": {
                    "filter": "cat",
                    "nums": [1, 2, 3]
                  },
                  "expected": [2, 3]
                }
              ]
            },
            {
              "it": "allows accessing builtin functions via the $ key",
              "assertions": [
                {
                  "query": "[{filter: \"hp\"}, {filter: \"lp\"}] | $.filter filter == \"lp\"",
                  "data": null,
                  "expected": [
                    {
                      "filter": "lp"
                    }
                  ]
                }
              ]
            },
            {
              "it": "allows single-argument functions in piped expressions via the $ key",
              "assertions": [
                {
                  "query": "[null, null, null, null, null, null] | $.count",
                  "data": null,
                  "expected": 6
                }
              ]
            },
            {
              "it": "gives us a method for un-overwriting things in the data param",
              "assertions": [
                {
                  "query": "[{filter: hp}, {filter: lp}] | $.filter filter == $.@.filter",
                  "data": {
                    "filter": "lp",
                    "lp": "lp",
                    "hp": "hp"
                  },
                  "expected": [
                    {
                      "filter": "lp"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "function calls",
          "cases": [
            {
              "it": "treats functions as first order and can call complex expressions",
              "assertions": [
                {
                  "query": "(if toggle keys values) {one: \"two\"}",
                  "data": {
                    "toggle": true
                  },
                  "expected": ["one"]
                },
                {
                  "query": "(if toggle keys values) {one: \"two\"}",
                  "data": {
                    "toggle": false
                  },
                  "expected": ["two"]
                }
              ]
            }
          ]
        },
        {
          "describe": "piping",
          "cases": [
            {
              "it": "defines data for the pipe",
              "assertions": [
                {
                  "query": "foo | apply @ + foo",
                  "data": {
                    "foo": "bar"
                  },
                  "expected": "barbar"
                }
              ]
            },
            {
              "it": "lets the first stage propagate keys to the next pipe segment",
              "assertions": [
                {
                  "query": "{key: 1} | if key == 1 2",
                  "data": null,
                  "expected": 2
                }
              ]
            },
            {
              "it": "doesnt propagate keys to the third pipe segment from the first",
              "assertions": [
                {
                  "query": "{key: 1} | if key == 1 2 | if key == 1 3",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "treats the whole of the rhs of a pipe as a function if passed with parens",
              "assertions": [
                {
                  "query": "[0, 0] | (if true count null)",
                  "data": null,
                  "expected": 2
                },
                {
                  "query": "[0, 0] | if true count null",
                  "data": null,
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "context propagation",
          "cases": [
            {
              "it": "treats context variables like a stack rather than an overwrite",
              "assertions": [
                {
                  "query": "foo | apply [bar, @.zap, bleep] | stringjoin \" \"",
                  "data": {
                    "foo": {
                      "bar": "baz",
                      "zap": "zoop"
                    },
                    "bleep": "bloop"
                  },
                  "expected": "baz zoop bloop"
                }
              ]
            }
          ]
        },
        {
          "describe": "casting tables",
          "cases": [
            {
              "it": "casts strings to strings",
              "assertions": [
                {
                  "query": "\"hello\"",
                  "data": null,
                  "expected": "hello"
                }
              ]
            },
            {
              "it": "casts numbers to strings correctly",
              "assertions": [
                {
                  "query": "string 1",
                  "data": null,
                  "expected": "1"
                },
                {
                  "query": "string 1.0",
                  "data": null,
                  "expected": "1"
                },
                {
                  "query": "string @",
                  "data": 1.593934,
                  "expected": "1.593934"
                },
                {
                  "query": "string @",
                  "data": 1e50,
                  "expected": "1e+50"
                },
                {
                  "query": "string @",
                  "data": 3.284381e50,
                  "expected": "3.284381e+50"
                },
                {
                  "query": "string @",
                  "data": 1e-50,
                  "expected": "1e-50"
                },
                {
                  "query": "string @",
                  "data": 4.81429127e-50,
                  "expected": "4.81429127e-50"
                },
                {
                  "query": "string @",
                  "data": 3.141592653589793238462643383279502884197169399375105820974944e50,
                  "expected": "3.1415926535897932e+50"
                },
                {
                  "query": "string @",
                  "data": 3.141592653589793238462643383279502884197169399375105820974944,
                  "expected": "3.141592653589793"
                },
                {
                  "query": "string @",
                  "data": 1e-6,
                  "expected": "0.000001"
                },
                {
                  "query": "string @",
                  "data": 1e-7,
                  "expected": "1e-7"
                },
                {
                  "query": "string @",
                  "data": 3e20,
                  "expected": "300000000000000000000"
                },
                {
                  "query": "string @",
                  "data": 3e21,
                  "expected": "3e+21"
                },
                {
                  "query": "string @",
                  "data": 4503599627370495.5,
                  "expected": "4503599627370495.5"
                },
                {
                  "query": "string @",
                  "data": 4503599627370496,
                  "expected": "4503599627370496"
                },
                {
                  "query": "string @",
                  "data": 4503599627370496.5,
                  "expected": "4503599627370496"
                },
                {
                  "query": "string @",
                  "data": 9007199254740991,
                  "expected": "9007199254740991"
                },
                {
                  "query": "string @",
                  "data": 9007199254740992,
                  "expected": "9007199254740992"
                },
                {
                  "query": "string @",
                  "data": 9007199254740994,
                  "expected": "9007199254740994"
                },
                {
                  "query": "string @",
                  "data": 9007199254740995,
                  "expected": "9007199254740996"
                }
              ]
            },
            {
              "it": "casts bools to strings correctly",
              "assertions": [
                {
                  "query": "string true",
                  "data": null,
                  "expected": "true"
                },
                {
                  "query": "string false",
                  "data": null,
                  "expected": "false"
                }
              ]
            },
            {
              "it": "casts null to string correctly",
              "assertions": [
                {
                  "query": "string null",
                  "data": null,
                  "expected": "null"
                }
              ]
            },
            {
              "it": "casts objects to string as json",
              "assertions": [
                {
                  "query": "string {a: 1}",
                  "data": null,
                  "expected": "{\"a\":1}"
                },
                {
                  "query": "string {a: 1, b: \"2\"}",
                  "data": null,
                  "expected": "{\"a\":1,\"b\":\"2\"}"
                },
                {
                  "query": "string {a: 1, b: {c: 2}}",
                  "data": null,
                  "expected": "{\"a\":1,\"b\":{\"c\":2}}"
                }
              ]
            },
            {
              "it": "casts arrays to string as json",
              "assertions": [
                {
                  "query": "string [1]",
                  "data": null,
                  "expected": "[1]"
                },
                {
                  "query": "string [1, 2]",
                  "data": null,
                  "expected": "[1,2]"
                },
                {
                  "query": "string [1, {a: 2}]",
                  "data": null,
                  "expected": "[1,{\"a\":2}]"
                }
              ]
            },
            {
              "it": "fails to cast functions and regexes",
              "assertions": [
                {
                  "query": "string filter",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "string (regex \"hi\")",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "casts strings to floats",
              "assertions": [
                {
                  "query": "float \"1\"",
                  "data": null,
                  "expected": 1.0
                },
                {
                  "query": "float \"-30\"",
                  "data": null,
                  "expected": -30.0
                },
                {
                  "query": "float \" -99.5\"  ",
                  "data": null,
                  "expected": -99.5
                },
                {
                  "query": "float \"1.0\"",
                  "data": null,
                  "expected": 1.0
                },
                {
                  "query": "float \"1.1\"",
                  "data": null,
                  "expected": 1.1
                },
                {
                  "query": "float \"1.1e1\"",
                  "data": null,
                  "expected": 11.0
                },
                {
                  "query": "float \"1.1e-1\"",
                  "data": null,
                  "expected": 0.11
                },
                {
                  "query": "float \"5.\"",
                  "data": 5,
                  "expected": 5.0
                },
                {
                  "query": "float \"1.1.1\"",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "float \"1 . 1\"",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "casts floats to floats",
              "assertions": [
                {
                  "query": "float 1",
                  "data": null,
                  "expected": 1.0
                },
                {
                  "query": "float 1.0",
                  "data": null,
                  "expected": 1.0
                },
                {
                  "query": "float 1.1",
                  "data": null,
                  "expected": 1.1
                }
              ]
            },
            {
              "it": "casts bools to floats",
              "assertions": [
                {
                  "query": "float true",
                  "data": null,
                  "expected": 1.0
                },
                {
                  "query": "float false",
                  "data": null,
                  "expected": 0.0
                }
              ]
            },
            {
              "it": "casts null to float",
              "assertions": [
                {
                  "query": "float null",
                  "data": null,
                  "expected": 0.0
                }
              ]
            },
            {
              "it": "fails to cast functions, regexes, objects, and arrays to floats ",
              "assertions": [
                {
                  "query": "float filter",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "float (regex \"hi\")",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "float {a: 1}",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "float [1]",
                  "data": null,
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "syntax oddities",
          "cases": [
            {
              "it": "handles spaces in lots of odd places",
              "assertions": [
                {
                  "query": " string \"hi\" ",
                  "data": null,
                  "expected": "hi"
                },
                {
                  "query": "climber .alex",
                  "data": {
                    "climber": {
                      "alex": "honnold"
                    }
                  },
                  "expected": "honnold"
                },
                {
                  "query": "climber. alex",
                  "data": {
                    "climber": {
                      "alex": "honnold"
                    }
                  },
                  "expected": "honnold"
                },
                {
                  "query": "climber . alex",
                  "data": {
                    "climber": {
                      "alex": "honnold"
                    }
                  },
                  "expected": "honnold"
                },
                {
                  "query": "( (  ((5) \t  )))\t\n",
                  "data": null,
                  "expected": 5
                },
                {
                  "query": "\t[ ([(    [@] )]\n)]",
                  "data": "hi",
                  "expected": [[["hi"]]]
                },
                {
                  "query": "count\t[4]",
                  "data": null,
                  "expected": 1
                },
                {
                  "query": "\"bees\" [3]",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "\"bees\"[3]",
                  "data": null,
                  "expected": "s"
                }
              ]
            },
            {
              "it": "handles complicated clusters of syntax",
              "assertions": [
                {
                  "query": "{x:{y:2}}|apply x[(keys x)[0]]",
                  "data": null,
                  "expected": 2
                }
              ]
            },
            {
              "it": "handles syntaxes in object and array literals",
              "assertions": [
                {
                  "query": "[-1 - 500, { isSpot: dog == \"spot\"}, (events | filter type==\"purchase\" | count)]",
                  "data": {
                    "dog": "spot",
                    "events": [
                      {
                        "type": "purchase"
                      },
                      {
                        "type": "purchase"
                      },
                      {
                        "type": "click"
                      }
                    ]
                  },
                  "expected": [
                    -501,
                    {
                      "isSpot": true
                    },
                    2
                  ]
                },
                {
                  "query": "{ spotCount: (events | filter type =~ \"p[ae]t\" | count), dog: \"spot\" }",
                  "data": {
                    "events": [
                      {
                        "type": "pet"
                      },
                      {
                        "type": "pat"
                      },
                      {
                        "type": "pot"
                      }
                    ]
                  },
                  "expected": {
                    "spotCount": 2,
                    "dog": "spot"
                  }
                },
                {
                  "query": "[-1 - 500, { isSpot: dog == \"spot\"}, events | filter type==\"purchase\" | count]",
                  "data": {
                    "dog": "spot",
                    "events": [
                      {
                        "type": "purchase"
                      },
                      {
                        "type": "purchase"
                      },
                      {
                        "type": "click"
                      }
                    ]
                  },
                  "expected": [
                    -501,
                    {
                      "isSpot": true
                    },
                    2
                  ]
                },
                {
                  "query": "{ spotCount: events | filter type =~ \"p[ae]t\" | count, dog: \"spot\" }",
                  "data": {
                    "events": [
                      {
                        "type": "pet"
                      },
                      {
                        "type": "pat"
                      },
                      {
                        "type": "pot"
                      }
                    ]
                  },
                  "expected": {
                    "spotCount": 2,
                    "dog": "spot"
                  }
                },
                {
                  "query": "{ ct: [5] | count } | entries",
                  "data": null,
                  "expected": [["ct", 1]]
                }
              ]
            }
          ]
        },
        {
          "describe": "associativity in weird cases",
          "cases": [
            {
              "it": "handles a shotgun of different associativities",
              "assertions": [
                {
                  "query": "(1 - 2 + 3 - 4 + 5) == ((((1 - 2) + 3) - 4) + 5)",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "(1 / 2 * 3 / 4 * 5) == ((((1 / 2) * 3) / 4) * 5)",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "(!-1) == (!(-1))",
                  "data": null,
                  "expected": true
                },
                {
                  "query": "(one - two - three) == ((one - two) - three)",
                  "data": {
                    "one": 1,
                    "two": 2.5,
                    "three": 3.9393
                  },
                  "expected": true
                },
                {
                  "query": "(one - two * three) == (one - (two * three))",
                  "data": {
                    "one": 1,
                    "two": 2.5,
                    "three": 3.9393
                  },
                  "expected": true
                },
                {
                  "query": "(a == b * 5) == (a == (b * 5))",
                  "data": {
                    "a": 100.59,
                    "b": 30
                  },
                  "expected": true
                },
                {
                  "query": "(a / 3 + 2 == b * 5) == (((a / 3) + 2) == (b * 5))",
                  "data": {
                    "a": 10.59,
                    "b": 3.5
                  },
                  "expected": true
                },
                {
                  "query": "(a / 3 + 2 == b * 5 | apply @) == ((((a / 3) + 2) == (b * 5)) | apply @)",
                  "data": {
                    "a": 10.59,
                    "b": 3.5
                  },
                  "expected": true
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "describe": "builtins",
      "cases": [
        {
          "describe": "#count",
          "cases": [
            {
              "it": "counts the number of items in an array",
              "assertions": [
                {
                  "query": "count [1, 2, 3]",
                  "data": null,
                  "expected": 3
                },
                {
                  "query": "count [1, 2, 3, 4]",
                  "data": null,
                  "expected": 4
                },
                {
                  "query": "count []",
                  "data": null,
                  "expected": 0
                },
                {
                  "query": "count [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                  "data": null,
                  "expected": 10
                }
              ]
            }
          ]
        },
        {
          "describe": "#sum",
          "cases": [
            {
              "it": "sums the items in an array",
              "assertions": [
                {
                  "query": "sum []",
                  "data": null,
                  "expected": 0
                },
                {
                  "query": "sum [1, 2, 3]",
                  "data": null,
                  "expected": 6
                },
                {
                  "query": "sum [1, 2, 3, 4]",
                  "data": null,
                  "expected": 10
                },
                {
                  "query": "sum [1, 2, 3, \"4\"]",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "sum {}",
                  "data": null,
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#map",
          "cases": [
            {
              "it": "correctly maps simple values",
              "assertions": [
                {
                  "query": "map @ + 1 [1, 2, 3]",
                  "data": {},
                  "expected": [2, 3, 4]
                }
              ]
            },
            {
              "it": "correctly maps objecty values",
              "assertions": [
                {
                  "query": "map (feature + 1) arr",
                  "data": {
                    "arr": [
                      {
                        "feature": 1
                      },
                      {
                        "feature": 2
                      },
                      {
                        "feature": 3
                      }
                    ]
                  },
                  "expected": [2, 3, 4]
                }
              ]
            }
          ]
        },
        {
          "describe": "#filter",
          "cases": [
            {
              "it": "correctly filters simple values",
              "assertions": [
                {
                  "query": "filter @ > 1 [1, 2, 3]",
                  "data": {},
                  "expected": [2, 3]
                }
              ]
            },
            {
              "it": "correctly filters objecty values",
              "assertions": [
                {
                  "query": "filter (feature > 1) arr",
                  "data": {
                    "arr": [
                      {
                        "feature": 1
                      },
                      {
                        "feature": 2
                      },
                      {
                        "feature": 3
                      }
                    ]
                  },
                  "expected": [
                    {
                      "feature": 2
                    },
                    {
                      "feature": 3
                    }
                  ]
                }
              ]
            },
            {
              "it": "correctly filters events",
              "assertions": [
                {
                  "query": "events | filter type == \"hi\"",
                  "data": {
                    "events": [
                      {
                        "type": "hi"
                      },
                      {
                        "type": "hello"
                      },
                      {
                        "type": "hi"
                      }
                    ]
                  },
                  "expected": [
                    {
                      "type": "hi"
                    },
                    {
                      "type": "hi"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#reduce",
          "cases": [
            {
              "it": "can sum",
              "assertions": [
                {
                  "query": "reduce @[0] + @[1] 0 @",
                  "data": [1, 4, 5, 7, 8],
                  "expected": 25
                }
              ]
            }
          ]
        },
        {
          "describe": "#flatten",
          "cases": [
            {
              "it": "handles empty arrays",
              "assertions": [
                {
                  "query": "flatten []",
                  "data": null,
                  "expected": []
                },
                {
                  "query": "flatten [[]]",
                  "data": null,
                  "expected": []
                },
                {
                  "query": "flatten [[], [], []]",
                  "data": null,
                  "expected": []
                },
                {
                  "query": "flatten [[], [[]], [[]]]",
                  "data": null,
                  "expected": [[], []]
                }
              ]
            },
            {
              "it": "flattens arrays",
              "assertions": [
                {
                  "query": "flatten [[1, 2], [3, 4]]",
                  "data": null,
                  "expected": [1, 2, 3, 4]
                }
              ]
            },
            {
              "it": "fails when trying to flatten non-arrays",
              "assertions": [
                {
                  "query": "flatten 1",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "flatten \"hi\"",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "flatten {}",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "flatten [1, 2, 3]",
                  "data": null,
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#mapvalues",
          "cases": [
            {
              "it": "can map values",
              "assertions": [
                {
                  "query": "mapvalues @ + 1 { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "a": 2,
                    "b": 3,
                    "c": 4
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "filtervalues",
          "cases": [
            {
              "it": "can filter values",
              "assertions": [
                {
                  "query": "filtervalues @ > 1 { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "b": 2,
                    "c": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#mapkeys",
          "cases": [
            {
              "it": "can map keys",
              "assertions": [
                {
                  "query": "mapkeys @ + \"suffix\" { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "asuffix": 1,
                    "bsuffix": 2,
                    "csuffix": 3
                  }
                }
              ]
            },
            {
              "it": "casts new keys to strings",
              "assertions": [
                {
                  "query": "mapkeys {key: [@ + \"suffix\"]} { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "{\"key\":[\"asuffix\"]}": 1,
                    "{\"key\":[\"bsuffix\"]}": 2,
                    "{\"key\":[\"csuffix\"]}": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#filterkeys",
          "cases": [
            {
              "it": "can filter keys",
              "assertions": [
                {
                  "query": "filterkeys @ > \"b\" { \"a\": 1, \"b\": 2, \"c\": 3 }",
                  "data": {},
                  "expected": {
                    "c": 3
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#plus",
          "cases": [
            {
              "it": "can add numbers",
              "assertions": [
                {
                  "query": "1 + 2",
                  "data": {},
                  "expected": 3
                }
              ]
            },
            {
              "it": "can add negative numbers",
              "assertions": [
                {
                  "query": "-1 + 2",
                  "data": {},
                  "expected": 1
                }
              ]
            },
            {
              "it": "concatenates strings",
              "assertions": [
                {
                  "query": "\"hello\" + \" \" + \"world\"",
                  "data": {},
                  "expected": "hello world"
                }
              ]
            },
            {
              "it": "concatenates arrays",
              "assertions": [
                {
                  "query": "[1, 2] + [3, 4]",
                  "data": {},
                  "expected": [1, 2, 3, 4]
                }
              ]
            }
          ]
        },
        {
          "describe": "#[numerical binary operators]",
          "cases": [
            {
              "it": "can add numbers",
              "assertions": [
                {
                  "query": "1 + 2",
                  "data": {},
                  "expected": 3
                }
              ]
            },
            {
              "it": "can subtract numbers",
              "assertions": [
                {
                  "query": "1 - 2",
                  "data": {},
                  "expected": -1
                }
              ]
            },
            {
              "it": "can multiply numbers",
              "assertions": [
                {
                  "query": "1 * 2",
                  "data": {},
                  "expected": 2
                },
                {
                  "query": "1 * -2",
                  "data": {},
                  "expected": -2
                },
                {
                  "query": "1 * 2 * 3",
                  "data": {},
                  "expected": 6
                },
                {
                  "query": "1 * -2 * 3 * -4",
                  "data": {},
                  "expected": 24
                }
              ]
            },
            {
              "it": "can divide numbers",
              "assertions": [
                {
                  "query": "1 / 2",
                  "data": {},
                  "expected": 0.5
                }
              ]
            },
            {
              "it": "Throws on divide by zero",
              "assertions": [
                {
                  "query": "1 / 0",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "can modulo numbers",
              "assertions": [
                {
                  "query": "1 % 2",
                  "data": {},
                  "expected": 1
                }
              ]
            }
          ]
        },
        {
          "describe": "#[boolean binary operators]",
          "cases": [
            {
              "it": "can and booleans",
              "assertions": [
                {
                  "query": "true && true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true && false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "false && true",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "false && false",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "can or booleans",
              "assertions": [
                {
                  "query": "true || true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true || false",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "false || true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "false || false",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "allows short circuting with and",
              "assertions": [
                {
                  "query": "null && 0",
                  "data": {},
                  "expected": null
                },
                {
                  "query": "null && 1",
                  "data": {},
                  "expected": null
                },
                {
                  "query": "0 && null",
                  "data": {},
                  "expected": 0
                },
                {
                  "query": "1 && null",
                  "data": {},
                  "expected": null
                },
                {
                  "query": "1 && 0",
                  "data": {},
                  "expected": 0
                },
                {
                  "query": "1 && 2",
                  "data": {},
                  "expected": 2
                }
              ]
            },
            {
              "it": "allows short circuting with or",
              "assertions": [
                {
                  "query": "null || 0",
                  "data": {},
                  "expected": 0
                },
                {
                  "query": "null || 1",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "0 || null",
                  "data": {},
                  "expected": null
                },
                {
                  "query": "1 || null",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "1 || 0",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "1 || 2",
                  "data": {},
                  "expected": 1
                }
              ]
            }
          ]
        },
        {
          "describe": "#[comparators]",
          "cases": [
            {
              "it": "can compare numbers",
              "assertions": [
                {
                  "query": "1 == 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 == 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 != 2",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 != 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 > 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 > 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 >= 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 >= 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 < 2",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 < 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 <= 2",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 <= 1",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "can compare strings",
              "assertions": [
                {
                  "query": "\"a\" == \"b\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" == \"a\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" != \"b\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" != \"a\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" > \"b\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" > \"a\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" >= \"b\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" >= \"a\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" < \"b\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" < \"a\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"a\" <= \"b\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"a\" <= \"a\"",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "can compare booleans",
              "assertions": [
                {
                  "query": "true == false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true == true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true != false",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true != true",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true > false",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true > true",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true >= false",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true >= true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true < false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true < true",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true <= false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true <= true",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "fails to compare disparate types",
              "assertions": [
                {
                  "query": "1 > \"1\"",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "1 < \"1\"",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "1 >= \"1\"",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "1 <= \"1\"",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "cannot compare non-comparables",
              "assertions": [
                {
                  "query": "null > null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null < null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null >= null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null <= null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "count > count",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[] > []",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{} > {}",
                  "data": {},
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#find",
          "cases": [
            {
              "it": "selects the first matching element from an array",
              "assertions": [
                {
                  "query": "find @ > 1 [1, 2, 3]",
                  "data": {},
                  "expected": 2
                }
              ]
            },
            {
              "it": "returns null if nothing satisfies the condition",
              "assertions": [
                {
                  "query": "find @ > 4 [1, 2, 3]",
                  "data": {},
                  "expected": null
                }
              ]
            }
          ]
        },
        {
          "describe": "#index",
          "cases": [
            {
              "it": "correctly indexes arrays",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 2",
                  "data": {},
                  "expected": 3
                }
              ]
            },
            {
              "it": "returns null if out of bounds",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 5",
                  "data": {},
                  "expected": null
                }
              ]
            },
            {
              "it": "returns null if the array is empty",
              "assertions": [
                {
                  "query": "[] | index 0",
                  "data": {},
                  "expected": null
                }
              ]
            },
            {
              "it": "throws if the index is a non-integer number",
              "assertions": [
                {
                  "query": "[1, 2, 3] | index 1.5",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "allows indexing by negative zero",
              "assertions": [
                {
                  "query": "[1, 2, 3] | index (-0)",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "\"hello\" | index (-0)",
                  "data": {},
                  "expected": "h"
                }
              ]
            },
            {
              "it": "correctly indexes strings",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 2",
                  "data": {},
                  "expected": "c"
                }
              ]
            },
            {
              "it": "returns null if out of bounds",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 6",
                  "data": {},
                  "expected": null
                },
                {
                  "query": "[2, 3, 4, 5, 6] | index 6",
                  "data": {},
                  "expected": null
                }
              ]
            },
            {
              "it": "allows negative indices for both strings and arrays",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index (-2)",
                  "data": {},
                  "expected": 4
                },
                {
                  "query": "\"abcdef\" | index (-2)",
                  "data": {},
                  "expected": "e"
                }
              ]
            },
            {
              "it": "allows ranges",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 2 4",
                  "data": {},
                  "expected": [3, 4]
                }
              ]
            },
            {
              "it": "allows ranges on strings",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 2 4",
                  "data": {},
                  "expected": "cd"
                },
                {
                  "query": "\"abcdef\" | index 2 (-1)",
                  "data": {},
                  "expected": "cde"
                }
              ]
            },
            {
              "it": "allows ranges that go outside the bounds of the target",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 2 10",
                  "data": {},
                  "expected": "cdef"
                },
                {
                  "query": "\"abcdef\" | index 9 10",
                  "data": {},
                  "expected": ""
                },
                {
                  "query": "[1, 2, 3, 4, 5] | index 9 10",
                  "data": {},
                  "expected": []
                },
                {
                  "query": "[1, 2, 3, 4, 5] | index 2 10",
                  "data": {},
                  "expected": [3, 4, 5]
                }
              ]
            },
            {
              "it": "allows implicit beginnings and ends",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | index 1 null",
                  "data": {},
                  "expected": [2, 3, 4, 5]
                },
                {
                  "query": "[1, 2, 3, 4, 5] | index null (-1)",
                  "data": {},
                  "expected": [1, 2, 3, 4]
                }
              ]
            },
            {
              "it": "allows implicit beginnings and ends on strings",
              "assertions": [
                {
                  "query": "\"abcdef\" | index 1 null",
                  "data": {},
                  "expected": "bcdef"
                },
                {
                  "query": "\"abcdef\" | index null (-1)",
                  "data": {},
                  "expected": "abcde"
                }
              ]
            },
            {
              "it": "behaves identically to subscript syntax",
              "assertions": [
                {
                  "query": "(@[0:0]) == (index 0 0 @)",
                  "data": [1, {}, "3", 4, null],
                  "expected": true
                },
                {
                  "query": "(@[-1]) == (index (-1) @)",
                  "data": [1, {}, "3", 4, null],
                  "expected": true
                },
                {
                  "query": "(@[-1:]) == (index (-1) null @)",
                  "data": [1, {}, "3", 4, null],
                  "expected": true
                },
                {
                  "query": "(@[:-2]) == (index null (-2) @)",
                  "data": [1, {}, "3", 4, null],
                  "expected": true
                }
              ]
            },
            {
              "it": "allows indexing on nulls via strings and numbers",
              "assertions": [
                {
                  "query": "null | index 1",
                  "data": {},
                  "expected": null
                },
                {
                  "query": "null | index \"stevia\"",
                  "data": {},
                  "expected": null
                }
              ]
            },
            {
              "it": "throws if objects are indexed by the wrong type, single argument",
              "assertions": [
                {
                  "query": "{a: 5} | index 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index false",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index (regex \".\")",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index sum",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index []",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index {}",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "throws if arrays are indexed by the wrong type, single argument",
              "assertions": [
                {
                  "query": "[1, 2, 3] | index \"0\"",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index false",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index (regex \".\")",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index sum",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index []",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index {}",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "throws if strings are indexed by the wrong type, single argument",
              "assertions": [
                {
                  "query": "\"greetings fellow humans\" | index \"0\"",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "\"greetings fellow humans\" | index false",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "\"greetings fellow humans\" | index null",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "\"greetings fellow humans\" | index (regex \".\")",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "\"greetings fellow humans\" | index sum",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "\"greetings fellow humans\" | index []",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "\"greetings fellow humans\" | index {}",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "throws if nulls are indexed by the wrong type, single argument",
              "assertions": [
                {
                  "query": "null | index false",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null | index (regex \".\")",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null | index sum",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null | index []",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "null | index {}",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "throws if objects are indexed using two arguments",
              "assertions": [
                {
                  "query": "{a: 5} | index 0 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index false 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index null 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index (regex \".\") 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index sum 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index [] 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "{a: 5} | index {} 0",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "throws if arrays are indexed by the wrong type, two arguments",
              "assertions": [
                {
                  "query": "[1, 2, 3] | index \"0\" 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index false 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index (regex \".\") 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[1, 2, 3] | index sum 0",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "throws if indexing an unindexable type",
              "assertions": [
                {
                  "query": "2 | index 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "false | index 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "(regex \".\") | index 0",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "sum | index 0",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "indexes strings via unicode code points",
              "assertions": [
                {
                  "query": "\"üòä\" | index 0",
                  "data": null,
                  "expected": "üòä"
                },
                {
                  "query": "\"üëãüèΩ\" | index 0",
                  "data": null,
                  "expected": "üëã"
                },
                {
                  "query": "\"üëãüèΩ\" | index 1",
                  "data": null,
                  "expected": "üèΩ"
                }
              ]
            },
            {
              "it": "indexes arrays via unicode code points using ranges",
              "assertions": [
                {
                  "query": "\"hiüëãüèΩ\" | index 1 3",
                  "data": null,
                  "expected": "iüëã"
                },
                {
                  "query": "\"hiüëãüèΩ\" | index 1 4",
                  "data": null,
                  "expected": "iüëãüèΩ"
                }
              ]
            }
          ]
        },
        {
          "describe": "#keys",
          "cases": [
            {
              "it": "returns the keys of an object",
              "assertions": [
                {
                  "query": "{a: 1, b: 2} | keys",
                  "data": {},
                  "expected": ["a", "b"]
                }
              ]
            },
            {
              "it": "returns an empty array if the object is empty",
              "assertions": [
                {
                  "query": "{} | keys",
                  "data": {},
                  "expected": []
                }
              ]
            }
          ]
        },
        {
          "describe": "#values",
          "cases": [
            {
              "it": "returns the values of an object",
              "assertions": [
                {
                  "query": "{a: 1, b: 2} | values",
                  "data": {},
                  "expected": [1, 2]
                }
              ]
            },
            {
              "it": "returns an empty array if the object is empty",
              "assertions": [
                {
                  "query": "{} | values",
                  "data": {},
                  "expected": []
                }
              ]
            }
          ]
        },
        {
          "describe": "#groupby",
          "cases": [
            {
              "it": "groups an array by a key",
              "assertions": [
                {
                  "query": "[{a: 1}, {a: 2}, {a: 3}] | groupby a",
                  "data": {},
                  "expected": {
                    "1": [
                      {
                        "a": 1
                      }
                    ],
                    "2": [
                      {
                        "a": 2
                      }
                    ],
                    "3": [
                      {
                        "a": 3
                      }
                    ]
                  }
                }
              ]
            },
            {
              "it": "casts the key to a string",
              "assertions": [
                {
                  "query": "[{a: 1}, {a: 2}, {a: 3}] | groupby @",
                  "data": {},
                  "expected": {
                    "{\"a\":1}": [
                      {
                        "a": 1
                      }
                    ],
                    "{\"a\":2}": [
                      {
                        "a": 2
                      }
                    ],
                    "{\"a\":3}": [
                      {
                        "a": 3
                      }
                    ]
                  }
                }
              ]
            },
            {
              "it": "correctly groups events",
              "assertions": [
                {
                  "query": "events | groupby email",
                  "data": {
                    "events": [
                      {
                        "type": "signup",
                        "email": "test1@example.com"
                      },
                      {
                        "type": "signup",
                        "email": "test2@example.com"
                      },
                      {
                        "type": "play",
                        "email": "test2@example.com"
                      },
                      {
                        "type": "play",
                        "email": "test2@example.com"
                      }
                    ]
                  },
                  "expected": {
                    "test1@example.com": [
                      {
                        "email": "test1@example.com",
                        "type": "signup"
                      }
                    ],
                    "test2@example.com": [
                      {
                        "email": "test2@example.com",
                        "type": "signup"
                      },
                      {
                        "email": "test2@example.com",
                        "type": "play"
                      },
                      {
                        "email": "test2@example.com",
                        "type": "play"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#sort",
          "cases": [
            {
              "it": "sensibly sorts numbers",
              "assertions": [
                {
                  "query": "[1, 2, 3, 4, 5] | sort",
                  "data": {},
                  "expected": [1, 2, 3, 4, 5]
                },
                {
                  "query": "[11, 2, 32, 104, 5] | sort",
                  "data": {},
                  "expected": [2, 5, 11, 32, 104]
                }
              ]
            },
            {
              "it": "sensibly sorts strings",
              "assertions": [
                {
                  "query": "[\"banana\", \"apple\", \"carrot\", \"cabbage\"] | sort",
                  "data": {},
                  "expected": ["apple", "banana", "cabbage", "carrot"]
                }
              ]
            },
            {
              "it": "sensibly sorts booleans",
              "assertions": [
                {
                  "query": "[true, false, true, false] | sort",
                  "data": {},
                  "expected": [false, false, true, true]
                }
              ]
            },
            {
              "it": "fails to sort nonhomogenous arrays",
              "assertions": [
                {
                  "query": "[1, \"a\", true, false] | sort",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[{}, 2, [], 4, 5] | sort",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "fails to sort arrays of objects",
              "assertions": [
                {
                  "query": "[{}, {}, {}] | sort",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "fails to sort arrays of arrays",
              "assertions": [
                {
                  "query": "[[2], [1], [3]] | sort",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "fails to sort arrays of null",
              "assertions": [
                {
                  "query": "[null, null, null] | sort",
                  "data": {},
                  "throws": true
                }
              ]
            },
            {
              "it": "fails to sort single-element arrays of non-sortable types",
              "assertions": [
                {
                  "query": "[{}] | sort",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[[]] | sort",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[regex \"x\"] | sort",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[null] | sort",
                  "data": {},
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#sortby",
          "cases": [
            {
              "it": "sensibly sorts items based on the specified expression",
              "assertions": [
                {
                  "query": "[{sk: 11}, {sk: 2}, {sk: 32}, {sk: 104}, {sk: 5}] | sortby sk",
                  "data": {},
                  "expected": [
                    {
                      "sk": 2
                    },
                    {
                      "sk": 5
                    },
                    {
                      "sk": 11
                    },
                    {
                      "sk": 32
                    },
                    {
                      "sk": 104
                    }
                  ]
                },
                {
                  "query": "[{a: 3}, {a: 1}, {a: 2}] | sortby a | map a",
                  "data": {},
                  "expected": [1, 2, 3]
                }
              ]
            },
            {
              "it": "fails to sort unsortable keys",
              "assertions": [
                {
                  "query": "[{a: []}, {a: 1}, {a: 2}] | sortby a",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[{a: 3}, {a: regex \"hello\"}, {a: 2}] | sortby a",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "[{a: {}}] | sortby a",
                  "data": {},
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#reverse",
          "cases": [
            {
              "it": "reverses an array",
              "assertions": [
                {
                  "query": "reverse [1, 2, 3, 4, 5]",
                  "data": {},
                  "expected": [5, 4, 3, 2, 1]
                }
              ]
            },
            {
              "it": "handles empty arrays",
              "assertions": [
                {
                  "query": "reverse []",
                  "data": {},
                  "expected": []
                }
              ]
            }
          ]
        },
        {
          "describe": "#if",
          "cases": [
            {
              "it": "returns the first value if the condition is true",
              "assertions": [
                {
                  "query": "if true 1 2",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "if arg left right",
                  "data": {
                    "arg": 1,
                    "left": 2,
                    "right": 3
                  },
                  "expected": 2
                }
              ]
            },
            {
              "it": "returns the second value if the condition is false",
              "assertions": [
                {
                  "query": "if false 1 2",
                  "data": {},
                  "expected": 2
                },
                {
                  "query": "if arg left right",
                  "data": {
                    "arg": 0,
                    "left": 2,
                    "right": 3
                  },
                  "expected": 3
                }
              ]
            }
          ]
        },
        {
          "describe": "#dotaccessor",
          "cases": [
            {
              "it": "correctly selects deep values",
              "assertions": [
                {
                  "query": "hello.over.there",
                  "data": {
                    "hello": {
                      "over": {
                        "there": "world"
                      }
                    }
                  },
                  "expected": "world"
                }
              ]
            },
            {
              "it": "allows complex lhs expressions",
              "assertions": [
                {
                  "query": "(@ | apply @[0]).hello",
                  "data": [
                    {
                      "hello": "world"
                    }
                  ],
                  "expected": "world"
                }
              ]
            },
            {
              "it": "returns null on unknown key",
              "assertions": [
                {
                  "query": "hello.bar",
                  "data": {
                    "hello": {
                      "foo": "world"
                    }
                  },
                  "expected": null
                }
              ]
            },
            {
              "it": "implements null coalescing by default",
              "assertions": [
                {
                  "query": "one.two.three.four",
                  "data": {
                    "one": {}
                  },
                  "expected": null
                }
              ]
            },
            {
              "it": "fails to dotaccess types that can't be indexed by strings",
              "assertions": [
                {
                  "query": "(1).foo",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "(\"foo\").foo",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "(true).foo",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "(false).foo",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "(regex \".\").foo",
                  "data": {},
                  "throws": true
                },
                {
                  "query": "regex.foo",
                  "data": {},
                  "throws": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#log",
          "cases": [
            {
              "it": "passes values through without modification",
              "assertions": [
                {
                  "query": "log 1",
                  "data": {},
                  "expected": 1
                },
                {
                  "query": "log true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "log \"hello\"",
                  "data": {},
                  "expected": "hello"
                },
                {
                  "query": "log [1, 2, 3]",
                  "data": {},
                  "expected": [1, 2, 3]
                },
                {
                  "query": "log {a: 1, b: 2}",
                  "data": {},
                  "expected": {
                    "a": 1,
                    "b": 2
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#summarize",
          "cases": [
            {
              "it": "summarizes a array of numbers",
              "assertions": [
                {
                  "query": "summarize [1, 2, 5, 10, 12]",
                  "data": {},
                  "expected": {
                    "min": 1,
                    "max": 12,
                    "mean": 6,
                    "median": 5,
                    "stddev": 4.847679857416329,
                    "variance": 23.5
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#sequence",
          "cases": [
            {
              "it": "finds sequences that satisfy the constraints",
              "assertions": [
                {
                  "query": "@ | sequence type == \"chat\" type == \"convert\"",
                  "data": [
                    {
                      "type": "convert",
                      "data": "one"
                    },
                    {
                      "type": "chat",
                      "data": "two"
                    },
                    {
                      "type": "convert",
                      "data": "three"
                    },
                    {
                      "type": "convert",
                      "data": "four"
                    },
                    {
                      "type": "chat",
                      "data": "five"
                    },
                    {
                      "type": "convert",
                      "data": "six"
                    }
                  ],
                  "expected": [
                    [
                      {
                        "type": "chat",
                        "data": "two"
                      },
                      {
                        "type": "convert",
                        "data": "three"
                      }
                    ],
                    [
                      {
                        "type": "chat",
                        "data": "two"
                      },
                      {
                        "type": "convert",
                        "data": "four"
                      }
                    ],
                    [
                      {
                        "type": "chat",
                        "data": "two"
                      },
                      {
                        "type": "convert",
                        "data": "six"
                      }
                    ],
                    [
                      {
                        "type": "chat",
                        "data": "five"
                      },
                      {
                        "type": "convert",
                        "data": "six"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "describe": "#replace",
          "cases": [
            {
              "it": "correctly replaces string values",
              "assertions": [
                {
                  "query": "\"hello\" | replace \"ll\" \"zop\"",
                  "data": {},
                  "expected": "hezopo"
                }
              ]
            },
            {
              "it": "accepts a regex for as the selector",
              "assertions": [
                {
                  "query": "\"hello\" | replace (regex \"l+\") \"zop\"",
                  "data": {},
                  "expected": "hezopo"
                }
              ]
            },
            {
              "it": "allows flagged regexes",
              "assertions": [
                {
                  "query": "\"hello\" | replace (regex \"l\" \"g\") \"zop\"",
                  "data": {},
                  "expected": "hezopzopo"
                }
              ]
            },
            {
              "it": "replaces only the first instance by default",
              "assertions": [
                {
                  "query": "\"hello\" | replace \"l\" \"za\"",
                  "data": {},
                  "expected": "hezalo"
                }
              ]
            }
          ]
        },
        {
          "describe": "#match/#regex",
          "cases": [
            {
              "it": "correctly matches regexes",
              "assertions": [
                {
                  "query": "\"hello\" | match (regex \"he..o\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match (regex \"he..a\")",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "allows flagged regexes",
              "assertions": [
                {
                  "query": "\"Hello\" | match (regex \"[a-z]ello\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"Hello\" | match (regex \"[a-z]ello\" \"i\")",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "allows matching via the =~ operator",
              "assertions": [
                {
                  "query": "\"Hello\" =~ (regex \"[a-z]ello\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"Hello\" =~ (regex \"[a-z]ello\" \"i\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"my name is mister cool guy\" =~ (regex \"[a-z ]*\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"my name is #1 cool guy\" =~ (regex \"[a-z ]*\")",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "treats string arguments as regexes with no flags",
              "assertions": [
                {
                  "query": "\"hello\" | match \"he..o\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match \"he..a\"",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "returns true if there is a match within the string",
              "assertions": [
                {
                  "query": "\"hello\" | match \"he\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match \"el\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match \"lo\"",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "returns true if there is an internal match via regex",
              "assertions": [
                {
                  "query": "\"hello\" | match (regex \"he\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match (regex \"el\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" | match (regex \"lo\")",
                  "data": {},
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#equal",
          "cases": [
            {
              "it": "compares strings correctly",
              "assertions": [
                {
                  "query": "\"hello\" == \"hello\"",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "\"hello\" == \"world\"",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares numbers correctly",
              "assertions": [
                {
                  "query": "1 == 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1 == 2",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1.0 == 1",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "1.0 == -1",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares nulls correctly",
              "assertions": [
                {
                  "query": "null == null",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "null == 1",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "evaluates to false when comparing different types",
              "assertions": [
                {
                  "query": "1 == \"1\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "1 == null",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "null == 1",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "0 == null",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "\"false\" == false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true == \"true\"",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "true == []",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "false == []",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[] == {}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{} == []",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares arrays correctly",
              "assertions": [
                {
                  "query": "[] == []",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[1, 2, 3] == [1, 2, 3]",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[1, 2, 3] == [1, 2, 3, 4]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[1, 2, 3] == [1, 2, 4]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[[], [], [[]], [4]] == [[], [], [[]], [4]]",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[[], [], [[]], [3]] == [[], [], [[]], [4]]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[[], [], [], [4]] == [[], [], [[]], [4]]",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "[\"hello\", \"there\"] == [\"hello\", \"there\"]",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "[\"hello\", \"there\"] == [\"hello\", \"thoo\"]",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares objects correctly",
              "assertions": [
                {
                  "query": "{} == {}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{a: true} == {}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1} == {\"a\": 1}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{\"a\": 1} == {\"a\": 2}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{\"a\": 1, \"b\": 2} == {\"a\": 1, \"b\": 2, \"c\": 3}",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "{a: { b: []}} == {a: { b: []}}",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "{a: { b: []}} == {a: { b: [{}]}}",
                  "data": {},
                  "expected": false
                }
              ]
            },
            {
              "it": "compares regexes on source and flags",
              "assertions": [
                {
                  "query": "(regex \"i+\") == (regex \"i+\")",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "(regex \"j+\") == (regex \"i+\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "(regex \"beep boop\") == (regex \"i+\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "(regex \"i+\" \"g\") == (regex \"i+\")",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "(regex \"i+\" \"g\") == (regex \"i+\" \"g\")",
                  "data": {},
                  "expected": true
                }
              ]
            },
            {
              "it": "compares booleans correctly",
              "assertions": [
                {
                  "query": "true == true",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "false == false",
                  "data": {},
                  "expected": true
                },
                {
                  "query": "true == false",
                  "data": {},
                  "expected": false
                },
                {
                  "query": "false == true",
                  "data": {},
                  "expected": false
                }
              ]
            }
          ]
        },
        {
          "describe": "#split",
          "cases": [
            {
              "it": "splits basic strings",
              "assertions": [
                {
                  "query": "split \"hi\" @",
                  "data": "ahi tuna",
                  "expected": ["a", " tuna"]
                },
                {
                  "query": "split \"\" @",
                  "data": "ahi tuna",
                  "expected": ["a", "h", "i", " ", "t", "u", "n", "a"]
                }
              ]
            },
            {
              "it": "splits via regexes",
              "assertions": [
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi there",
                  "expected": ["hi", "there"]
                },
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi\r\n\r\nthere",
                  "expected": ["hi", "there"]
                },
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi\r\n\r\n\nthere",
                  "expected": ["hi", "there"]
                }
              ]
            },
            {
              "it": "handles splits of unicode strings with unicode-flagged regexes",
              "assertions": [
                {
                  "query": "\"üòä\" | split (regex \".\")",
                  "data": null,
                  "expected": ["", ""]
                }
              ]
            },
            {
              "it": "splits everywhere even with a non-global regex",
              "assertions": [
                {
                  "query": "split (regex \"\\\\s+\") @",
                  "data": "hi there friend!!",
                  "expected": ["hi", "there", "friend!!"]
                }
              ]
            },
            {
              "it": "splits unicode strings on codepoints",
              "assertions": [
                {
                  "query": "\"üëãüèΩ\" | split \"\"",
                  "data": null,
                  "expected": ["üëã", "üèΩ"]
                }
              ]
            }
          ]
        },
        {
          "describe": "#stringjoin",
          "cases": [
            {
              "it": "joins basic strings",
              "assertions": [
                {
                  "query": "stringjoin \"\" @",
                  "data": ["a", "b", "c"],
                  "expected": "abc"
                }
              ]
            },
            {
              "it": "joins with a delimiter",
              "assertions": [
                {
                  "query": "stringjoin \" \" @",
                  "data": ["a", "b", "c"],
                  "expected": "a b c"
                }
              ]
            },
            {
              "it": "round-trips with split",
              "assertions": [
                {
                  "query": "(split \":\" @ | stringjoin \":\") == @",
                  "data": "hello:hi:cattt:",
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#entries",
          "cases": [
            {
              "it": "returns an array of entries",
              "assertions": [
                {
                  "query": "entries @",
                  "data": {
                    "a": 1,
                    "b": 2
                  },
                  "expected": [
                    ["a", 1],
                    ["b", 2]
                  ]
                },
                {
                  "it": "round-trips with fromentries",
                  "query": "(entries @ | fromentries) == @",
                  "data": {
                    "a": 1,
                    "b": 2
                  },
                  "expected": true
                }
              ]
            }
          ]
        },
        {
          "describe": "#fromentries",
          "cases": [
            {
              "it": "returns an object from an array of entries",
              "assertions": [
                {
                  "query": "fromentries @",
                  "data": [
                    ["a", 1],
                    ["b", 2]
                  ],
                  "expected": {
                    "a": 1,
                    "b": 2
                  }
                }
              ]
            },
            {
              "it": "uses nulls for missing values",
              "assertions": [
                {
                  "query": "fromentries @",
                  "data": [["a", 1], ["b"], []],
                  "expected": {
                    "a": 1,
                    "b": null,
                    "null": null
                  }
                }
              ]
            },
            {
              "it": "casts non-string keys to strings",
              "assertions": [
                {
                  "query": "fromentries @",
                  "data": [
                    [{}, 1],
                    [[1, 2, 3], 2]
                  ],
                  "expected": {
                    "{}": 1,
                    "[1,2,3]": 2
                  }
                }
              ]
            }
          ]
        },
        {
          "describe": "#string",
          "cases": [
            {
              "it": "returns a string",
              "assertions": [
                {
                  "query": "string @",
                  "data": "hi",
                  "expected": "hi"
                }
              ]
            },
            {
              "it": "returns a string from a number",
              "assertions": [
                {
                  "query": "string @",
                  "data": 1,
                  "expected": "1"
                }
              ]
            },
            {
              "it": "returns a string from a boolean",
              "assertions": [
                {
                  "query": "string @",
                  "data": true,
                  "expected": "true"
                }
              ]
            },
            {
              "it": "returns a string from a null",
              "assertions": [
                {
                  "query": "string @",
                  "data": null,
                  "expected": "null"
                }
              ]
            },
            {
              "it": "returns a string from an array",
              "assertions": [
                {
                  "query": "string @",
                  "data": ["hi", "there"],
                  "expected": "[\"hi\",\"there\"]"
                }
              ]
            }
          ]
        },
        {
          "describe": "#float",
          "cases": [
            {
              "it": "returns a float",
              "assertions": [
                {
                  "query": "float @",
                  "data": 1.5,
                  "expected": 1.5
                }
              ]
            },
            {
              "it": "returns a float from a number",
              "assertions": [
                {
                  "query": "float @",
                  "data": 1,
                  "expected": 1
                }
              ]
            },
            {
              "it": "returns a float from a boolean",
              "assertions": [
                {
                  "query": "float @",
                  "data": true,
                  "expected": 1
                },
                {
                  "query": "float @",
                  "data": false,
                  "expected": 0
                }
              ]
            },
            {
              "it": "returns a float from a null",
              "assertions": [
                {
                  "query": "float @",
                  "data": null,
                  "expected": 0
                }
              ]
            }
          ]
        },
        {
          "describe": "#range",
          "cases": [
            {
              "it": "returns an array of numbers",
              "assertions": [
                {
                  "query": "range 3",
                  "data": null,
                  "expected": [0, 1, 2]
                }
              ]
            },
            {
              "it": "returns an array of numbers from a start",
              "assertions": [
                {
                  "query": "range 3 6",
                  "data": null,
                  "expected": [3, 4, 5]
                }
              ]
            },
            {
              "it": "returns an array of numbers from a start and step",
              "assertions": [
                {
                  "query": "range 3 6 2",
                  "data": null,
                  "expected": [3, 5]
                },
                {
                  "query": "range 3 7 2",
                  "data": null,
                  "expected": [3, 5]
                },
                {
                  "query": "range 10 100 7",
                  "data": null,
                  "expected": [
                    10, 17, 24, 31, 38, 45, 52, 59, 66, 73, 80, 87, 94
                  ]
                }
              ]
            },
            {
              "it": "fails if any of the arguments are not integers",
              "assertions": [
                {
                  "query": "range 3 6 \"a\"",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "range 3 6 2.5",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "range 3.5 6 2",
                  "data": null,
                  "throws": true
                },
                {
                  "query": "range 3 6.5 2",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "fails if the step is equal to 0",
              "assertions": [
                {
                  "query": "range 3 6 0",
                  "data": null,
                  "throws": true
                }
              ]
            },
            {
              "it": "returns an empty list if the start is greater than the end",
              "assertions": [
                {
                  "query": "range 6 3",
                  "data": null,
                  "expected": []
                },
                {
                  "query": "range 6 3 2",
                  "data": null,
                  "expected": []
                }
              ]
            },
            {
              "it": "returns an empty list if the step size is negative",
              "assertions": [
                {
                  "query": "range 3 6 (-2)",
                  "data": null,
                  "expected": []
                }
              ]
            },
            {
              "it": "counts backwards iff the step size is negative and start is greater than end",
              "assertions": [
                {
                  "query": "range 6 3 (-2)",
                  "data": null,
                  "expected": [6, 4]
                },
                {
                  "query": "range 7 3 (-1)",
                  "data": null,
                  "expected": [7, 6, 5, 4]
                }
              ]
            }
          ]
        },
        {
          "describe": "#apply",
          "cases": [
            {
              "it": "allows easy modification to a value via piping",
              "assertions": [
                {
                  "query": "@ | apply @ + 1",
                  "data": 1,
                  "expected": 2
                },
                {
                  "query": "@ | apply @ + 1 | apply @ + 2",
                  "data": 1,
                  "expected": 4
                }
              ]
            },
            {
              "it": "defines intermediate variables from the context variable",
              "assertions": [
                {
                  "query": "@ | apply a",
                  "data": {
                    "a": -1,
                    "b": -2
                  },
                  "expected": -1
                },
                {
                  "query": "@ | apply b",
                  "data": {
                    "a": -1,
                    "b": -2
                  },
                  "expected": -2
                }
              ]
            }
          ]
        },
        {
          "describe": "#withindices",
          "cases": [
            {
              "it": "returns an array of indices",
              "assertions": [
                {
                  "query": "withindices @",
                  "data": ["a", "b", "c"],
                  "expected": [
                    [0, "a"],
                    [1, "b"],
                    [2, "c"]
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "describe": "e2e",
      "cases": [
        {
          "describe": "try me out examples",
          "cases": [
            {
              "it": "handles users with an event message",
              "assertions": [
                {
                  "query": "events | filter type == \"send_message\" | groupby email | keys",
                  "data": {
                    "events": [
                      {
                        "type": "like",
                        "email": "harold@example.com",
                        "post_number": 5831
                      },
                      {
                        "type": "send_message",
                        "email": "flora@example.com",
                        "message": "Hello, friend!",
                        "targetUser": 95813
                      },
                      {
                        "type": "like",
                        "email": "flora@example.com",
                        "post_number": 12385
                      },
                      {
                        "type": "send_message",
                        "email": "flora@example.com",
                        "message": "I think you are cool!",
                        "targetUser": 95813
                      },
                      {
                        "type": "send_message",
                        "email": "william@example.com",
                        "message": "You Too!",
                        "targetUser": 8381
                      },
                      {
                        "type": "like",
                        "email": "emma@example.com",
                        "post_number": 17245
                      },
                      {
                        "type": "like",
                        "email": "flora@example.com",
                        "post_number": 5831
                      },
                      {
                        "type": "like",
                        "email": "william@example.com",
                        "post_number": 5831
                      },
                      {
                        "type": "like",
                        "email": "pete@example.com",
                        "post_number": 17245
                      }
                    ]
                  },
                  "expected": ["flora@example.com", "william@example.com"]
                }
              ]
            },
            {
              "it": "handles user emails that match a regex example",
              "assertions": [
                {
                  "query": "events | filter email =~ (regex \"^[hf]\")",
                  "data": {
                    "events": [
                      {
                        "type": "like",
                        "email": "harold@example.com",
                        "post_number": 5831
                      },
                      {
                        "type": "send_message",
                        "email": "flora@example.com",
                        "message": "Hello, friend!",
                        "targetUser": 95813
                      },
                      {
                        "type": "like",
                        "email": "flora@example.com",
                        "post_number": 12385
                      },
                      {
                        "type": "send_message",
                        "email": "flora@example.com",
                        "message": "I think you are cool!",
                        "targetUser": 95813
                      },
                      {
                        "type": "send_message",
                        "email": "william@example.com",
                        "message": "You Too!",
                        "targetUser": 8381
                      },
                      {
                        "type": "like",
                        "email": "emma@example.com",
                        "post_number": 17245
                      },
                      {
                        "type": "like",
                        "email": "flora@example.com",
                        "post_number": 5831
                      },
                      {
                        "type": "like",
                        "email": "william@example.com",
                        "post_number": 5831
                      },
                      {
                        "type": "like",
                        "email": "pete@example.com",
                        "post_number": 17245
                      }
                    ]
                  },
                  "expected": [
                    {
                      "type": "like",
                      "email": "harold@example.com",
                      "post_number": 5831
                    },
                    {
                      "type": "send_message",
                      "email": "flora@example.com",
                      "message": "Hello, friend!",
                      "targetUser": 95813
                    },
                    {
                      "type": "like",
                      "email": "flora@example.com",
                      "post_number": 12385
                    },
                    {
                      "type": "send_message",
                      "email": "flora@example.com",
                      "message": "I think you are cool!",
                      "targetUser": 95813
                    },
                    {
                      "type": "like",
                      "email": "flora@example.com",
                      "post_number": 5831
                    }
                  ]
                }
              ]
            },
            {
              "it": "handles animal counts example",
              "assertions": [
                {
                  "query": "animals | groupby variety | mapvalues (count @)",
                  "data": {
                    "animals": [
                      {
                        "variety": "cat",
                        "name": "Harold"
                      },
                      {
                        "variety": "dog",
                        "name": "Millie"
                      },
                      {
                        "variety": "cat",
                        "name": "Doggie"
                      },
                      {
                        "variety": "cat",
                        "name": "Jellybean"
                      },
                      {
                        "variety": "dog",
                        "name": "Bingo"
                      }
                    ]
                  },
                  "expected": {
                    "cat": 3,
                    "dog": 2
                  }
                }
              ]
            },
            {
              "it": "handles Out of Memory before Connect example",
              "assertions": [
                {
                  "query": "alerts | groupby processid | mapvalues (sequence type==\"outofmemory\" type==\"connect\" @) | filtervalues (count @) > 0 | keys",
                  "data": {
                    "alerts": [
                      {
                        "process": "server.exe",
                        "processid": "194",
                        "type": "outofmemory"
                      },
                      {
                        "process": "server.exe",
                        "processid": "195",
                        "type": "connect"
                      },
                      {
                        "process": "server.exe",
                        "processid": "195",
                        "type": "connect"
                      },
                      {
                        "process": "server.exe",
                        "processid": "195",
                        "type": "outofmemory"
                      },
                      {
                        "process": "server.exe",
                        "processid": "195",
                        "type": "outofmemory"
                      },
                      {
                        "process": "server.exe",
                        "processid": "194",
                        "type": "outofmemory"
                      },
                      {
                        "process": "server.exe",
                        "processid": "194",
                        "type": "connect"
                      },
                      {
                        "process": "server.exe",
                        "processid": "196",
                        "type": "connect"
                      },
                      {
                        "process": "server.exe",
                        "processid": "197",
                        "type": "outofmemory"
                      },
                      {
                        "process": "server.exe",
                        "processid": "197",
                        "type": "connect"
                      }
                    ]
                  },
                  "expected": ["194", "197"]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
